const React = require('react');

const siteConfig = require(process.cwd() + '/siteConfig.js');

class LanguageDropDown extends React.Component {
  render() {
    const enabledLanguages = [];
    let currentLanguage = 'English';

    siteConfig['languages'].map(lang => {
      if (lang.tag == this.props.language) {
        currentLanguage = lang.name;
      }
      if (lang.tag == this.props.language) {
        return;
      }
      enabledLanguages.push(React.createElement(
        'li',
        { key: lang.tag },
        React.createElement(
          'a',
          { href: siteConfig.baseUrl + lang.tag },
          lang.name
        )
      ));
    });

    enabledLanguages.push(React.createElement(
      'li',
      { key: 'recruiting' },
      React.createElement(
        'a',
        { href: siteConfig.recruitingLink, target: '_blank' },
        'Help Translate'
      )
    ));

    return React.createElement(
      'span',
      null,
      React.createElement(
        'li',
        null,
        React.createElement(
          'a',
          { id: 'languages-menu', href: '#' },
          React.createElement('img', {
            className: 'languages-icon',
            src: this.props.baseUrl + 'img/language.svg'
          }),
          currentLanguage
        ),
        React.createElement(
          'div',
          { id: 'languages-dropdown', className: 'hide' },
          React.createElement(
            'ul',
            { id: 'languages-dropdown-items' },
            enabledLanguages
          )
        )
      ),
      React.createElement('script', {
        dangerouslySetInnerHTML: {
          __html: `
        const languagesMenuItem = document.getElementById("languages-menu");
        const languagesDropDown = document.getElementById("languages-dropdown");
        languagesMenuItem.addEventListener("click", function(){
          if(languagesDropDown.className == "hide") {
            languagesDropDown.className = "visible";
          } else {
            languagesDropDown.className = "hide";
          }
        });
      `
        }
      })
    );
  }
}

class HeaderNav extends React.Component {
  constructor() {
    super();
    this.state = {
      slideoutActive: false
    };
  }

  makeLinks(link) {
    link.href = link.href.replace(/\/LANGUAGE\//, '\/' + this.props.language + '\/');
    return React.createElement(
      'li',
      { key: link.section },
      React.createElement(
        'a',
        {
          href: link.href,
          className: link.section === this.props.section ? 'active' : '' },
        siteConfig[this.props.language]['localized-strings'][link.text]
      )
    );
  }

  render() {
    return React.createElement(
      'div',
      { className: 'fixedHeaderContainer' },
      React.createElement(
        'div',
        { className: 'headerWrapper wrapper' },
        React.createElement(
          'header',
          null,
          React.createElement(
            'a',
            { href: this.props.baseUrl },
            React.createElement('img', { src: this.props.baseUrl + siteConfig.headerIcon }),
            React.createElement(
              'h2',
              null,
              this.props.title
            )
          ),
          this.renderResponsiveNav()
        )
      )
    );
  }

  /* 
  stick this between internal and external links
   <LanguageDropDown
    baseUrl={this.props.baseUrl}
    language={this.props.language}
  />
   <li className="navSearchWrapper reactNavSearchWrapper">
    <input id="search_input_react" type="text" placeholder="Search" />
  </li>
   */
  renderResponsiveNav() {
    return React.createElement(
      'div',
      { className: 'navigationWrapper navigationSlider' },
      React.createElement(
        'nav',
        { className: 'slidingNav' },
        React.createElement(
          'ul',
          { className: 'nav-site nav-site-internal' },
          this.props.config.headerLinksInternal.map(this.makeLinks, this),
          this.props.config.headerLinksExternal.map(this.makeLinks, this)
        )
      )
    );
  }
}

module.exports = HeaderNav;