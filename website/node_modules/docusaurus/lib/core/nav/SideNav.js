const React = require('react');
const classNames = require('classnames');

const siteConfig = require(process.cwd() + '/siteConfig.js');

class SideNav extends React.Component {
  render() {
    return React.createElement(
      'nav',
      { className: 'toc' },
      React.createElement(
        'div',
        { className: 'toggleNav' },
        React.createElement(
          'section',
          { className: 'navWrapper wrapper' },
          React.createElement(
            'div',
            { className: 'navBreadcrumb wrapper' },
            React.createElement(
              'div',
              { className: 'navToggle', id: 'navToggler' },
              React.createElement('i', null)
            ),
            React.createElement(
              'h2',
              null,
              React.createElement(
                'i',
                null,
                '\u203A'
              ),
              React.createElement(
                'span',
                null,
                this.props.current.category
              )
            )
          ),
          React.createElement(
            'div',
            { className: 'navGroups' },
            this.props.contents.map(this.renderCategory, this)
          )
        )
      ),
      React.createElement('script', {
        dangerouslySetInnerHTML: {
          __html: `
          var toggler = document.getElementById('navToggler');
          var nav = document.getElementById('docsNav');
          toggler.onclick = function() {
            nav.classList.toggle('docsSliderActive');
          };
        `
        }
      })
    );
  }
  renderCategory(category) {
    return React.createElement(
      'div',
      { className: 'navGroup navGroupActive', key: category.name },
      React.createElement(
        'h3',
        null,
        this.getLocalizedCategoryString(category.name)
      ),
      React.createElement(
        'ul',
        null,
        category.links.map(this.renderItemLink, this)
      )
    );
  }
  getLocalizedCategoryString(category) {
    let categoryString = siteConfig[this.props.language]['localized-strings'][category];
    if (typeof categoryString == 'undefined') {
      categoryString = category;
    }
    return categoryString;
  }
  getLocalizedString(metadata) {
    let localizedString = '';
    if (typeof metadata.localized_id == 'undefined' || typeof siteConfig[this.props.language] == 'undefined' || typeof siteConfig[this.props.language]['localized-strings'] == 'undefined') {
      localizedString = metadata.title;
    } else {
      localizedString = siteConfig[this.props.language]['localized-strings'][metadata.localized_id];
    }
    return localizedString;
  }
  getLink(metadata) {
    if (metadata.permalink) {
      if (metadata.permalink.match(/^https?:/)) {
        return metadata.permalink;
      }
      return siteConfig.baseUrl + metadata.permalink + '#content';
    }
    if (metadata.path) {
      return siteConfig.baseUrl + '/blog/' + metadata.path;
    }
    return null;
  }
  renderItemLink(link) {
    const itemClasses = classNames('navListItem', {
      navListItemActive: link.id === this.props.current.id
    });
    const linkClasses = classNames('navItem', {
      navItemActive: link.id === this.props.current.id
    });
    return React.createElement(
      'li',
      { className: itemClasses, key: link.id },
      React.createElement(
        'a',
        { className: linkClasses, href: this.getLink(link) },
        this.getLocalizedString(link)
      )
    );
  }
}
SideNav.defaultProps = {
  contents: []
};
module.exports = SideNav;