/**
 * @generated
 */
module.exports = [
  {
    "path": "2017/05/06/jest-20-delightful-testing-multi-project-runner.html",
    "content": "\nA few months ago we announced [Jest 19](http://facebook.github.io/jest/blog/2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements.html) which came with major new features and was the biggest Jest release until today. Jest 20 has twice the amount of changes compared to the previous version, features a complete rewrite of the test runner, adds new testing APIs. The new release enables a new level of customization and configuration for projects all while making it effortless to upgrade. Beyond Painless JavaScript Testing, we believe Jest is now delivering a **Delightful JavaScript Testing experience**. Let's take a look at the best new features and changes in depth:\n\n## Multi-Project-Runner & Configuration Overhaul\n\nUntil now, Jest could only operate in one project at a time. This is often cumbersome if you are working on many smaller projects that each have their own setup and configuration. With Jest 20, we rewrote the test runner completely to run many projects at the same time within a single instance of Jest, for example if you are working on a React frontend and a node.js backend. Here is a video of Jest running tests for [React](https://github.com/facebook/react), [Relay](https://github.com/facebook/relay), [Yarn](https://github.com/yarnpkg/yarn) and Jest all at the same time:\n\n![multi-runner](/jest/img/blog/20-multi-runner.gif)\n\n<!--truncate-->\n\nJest is now collapsing the usage guide after the first test run to save vertical space in the terminal. Along with this, we also improved watch mode by adding arrow-key support to the test pattern typeaheads and the test file and test name pattern typeaheads now work together rather than being unrelated features which allow to select the right tests to run more easily:\n\n![typeahead](/jest/img/blog/20-typeahead.png)\n\nFurther, we completely overhauled how the configuration system works inside of Jest. You can now pass any configuration option through the CLI to overwrite the ones specified in your configuration file. Along with that, we changed Jest to look for a `jest.config.js` file by default which means you are now able to define a Jest configuration using JavaScript as well as being able to configure it through `package.json` like before. Through the addition of all these new features, you are now able to combine Jest in more powerful ways than ever before. For example, if you would like to find out which tests Jest would run given a set of changed files from a commit across multiple projects in a monorepo, you can combine cli arguments like this now:\n\n```\n$ jest --projects projectA projectB --listTests --findRelatedTests projectA/banana.js projectB/kiwi.js\n[\n  \"projectA/banana.test.js\",\n  \"projectB/kiwi.test.js\",\n  \"projectB/pineapple.test.js\",\n]\n```\n\nThis is especially useful for continuous integration (CI) systems where you may want to only run a subset of tests for Pull Requests to prevent Jest from running thousands of test files on every small change.\n\nFinally, we are now properly mapping code coverage when using TypeScript and we are running code coverage for untested files in worker processes which yields significant speed ups for this feature.\n\n## New & Improved Testing APIs\n\nWe made a number of additions and improvements to the testing APIs which will help write more effective tests. We'd like to point out that all of these improvements were made entirely by community members!\n\n* **Better async testing:** Added new async/Promise support through resolves/rejects modifiers on expect: `expect(Promise(‚Ä¶)).resolves.toEqual(‚Ä¶)`. [See documentation](https://facebook.github.io/jest/docs/en/expect.html#resolves).\n* **Expect <n> assertions:** Along with the existing `expect.assertions(n)`, the new `expect.hasAssertions()` can be used to ensure a test has at least one assertion.\n* **Lint Plugin:** A `valid-expect` rule was added to `eslint-plugin-jest` to ensure that an assertion is called after invoking `expect`. This will prevent mistakes like a stray `expect(banana);` with a missing assertion call.\n* **Pretty-Format Plugins:** A number of new pretty-format plugins were added to Jest. We now pretty-print [Immutable.js](https://github.com/facebook/immutable-js/) data structures and HtmlElements in assertion failures and snapshots.\n* **Custom Environment:** It is now possible to add a `@jest-environment node|jsdom` annotation to the doc-block comment of a test file to use a test environment different from the default for individual tests.\n\nHere is an example of all how all the new APIs together will make testing more delightful:\n\n```\n/**\n * @jest-environment node\n */\n\ntest('compares apples and bananas', async () => {\n  expect.hasAssertions(); // Ensure this test has at least one assertion.\n\n  await expect(\n    Promise.resolve(Immutable.Map({apples: 1, bananas: 2})),\n  ).resolves.toEqual(Immutable.Map({apples: 1, bananas: 3}));\n\n  expect('banana'); // valid-expect in eslint-plugin-jest will show an error.\n});\n```\n\nThis example will print a test failure similar to this:\n\n![testing-apis](/jest/img/blog/20-testing-apis.png)\n\n## Breaking Changes\n\nAs with every major release, we are making a number of breaking changes to make larger changes in the future possible and to push the testing experience to a new level. This time, we tried our best to only break APIs that we don't expect to affect the majority of Jest's users:\n\n* **Fork of Jasmine 2.5:** We finally decided to fork Jasmine itself and take ownership over Jest's own test runner. This will allow us to improve all aspects of the unit testing experience in the future but for now we are focused on incremental rewrites and reducing the API surface. If you see a test breaking as a result of a Jasmine API that is now missing, there should be an equivalent feature on the `jest` or `expect` objects. As such, we have removed many Jasmine features that aren't generally used in most codebases.\n* **New Snapshots on CI:** Snapshots must always be committed along with the test and the modules they are testing. We changed Jest to not save new snapshots automatically in Continuous Integration (CI) environments or when the `--ci` flag is specified. To overwrite this behavior, which is generally not recommended, the `--updateSnapshot` flag can be used.\n* **Babel-Polyfill:** Jest used to load `babel-polyfill` automatically when using babel-jest which resulted in memory leaks inside of Jest. In most versions of node, it is not necessary to load `babel-polyfill` so we removed this auto-inclusion and instead changed Jest to only include `regenerator-runtime` by default, which is commonly used to support async/await in older versions of Node.js. If you need `babel-polyfill`, you can manually require it in your setup files.\n\n## Other Improvements\n\n* **Documentation:** Documentation is critical to share best practices and teach everyone how to write effective tests which will lead to better software. Over the last few weeks we have also expanded Jest's documentation to include a Snapshot Testing FAQ, a guide with information about how to use Jest with common JavaScript libraries as well as we documented the new features mentioned above.\n* **Translations:** We are now asking for your help to [translate the Jest documentation](https://crowdin.com/project/jest) to make it easier for people to learn how to use Jest.\n* **Custom Reporters:** Jest now supports custom test reporters through the `reporters` configuration option. You can finally customize the output of Jest as well as integrate it with other tools by generating reports in formats such as XML. [See documentation](https://facebook.github.io/jest/docs/en/configuration.html#reporters-array-modulename-modulename-options).\n* **Codebase Health:** It was only possible iterate so quickly in Jest because we spent a significant amount of time on the health of the codebase. We were one of the early adopters of [prettier](https://github.com/prettier/prettier), we notably increased flow coverage, forked Jasmine to improve our test runner library and we rewrote and refactored significant portions of Jest itself to set up Jest for success in the future.\n* **Bugfixes:** As always, we made plenty of bugfixes in Jest. The full changelog can be found in the [Jest repository](https://github.com/facebook/jest/blob/master/CHANGELOG.md#jest-2000).\n\n## Talks about Jest\n\nRecently the Jest core team and other contributors started to talk more about Jest and the experience of working on Jest at conferences:\n\n* Rogelio Guzman did a talk about [Jest Snapshots and Beyond](https://www.youtube.com/watch?time_continue=416&v=HAuXJVI_bUs) at React Conf.\n* I spoke about [Building High-Quality JavaScript Tools](https://developers.facebook.com/videos/f8-2017/building-high-quality-javascript-tools/) at Facebook's F8 conference.\n\n*As always, this release couldn't have been possible without you, the JavaScript community. We are incredibly grateful that we get the opportunity to work on improving JavaScript testing together. If you'd like to contribute to Jest, please don't hesitate to reach out to us on [GitHub](https://github.com/facebook/jest) or on [Discord](https://discordapp.com/channels/102860784329052160/103622435865104384).*\n",
    "title": "Jest 20: üíñ Delightful Testing & üèÉüèΩ Multi-Project-Runner",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "Jest 20: üíñ Delightful Testing & üèÉüèΩ Multi-Project-Runner"
  },
  {
    "path": "2017/02/21/jest-19-immersive-watch-mode-test-platform-improvements.html",
    "content": "\nToday we are pleased to ship version 19 of the Jest testing platform. It's the biggest Jest release we have shipped so far and we are quite excited to show you what we've built over the last two months:\n\n## Immersive Watch Mode\n\nWe [completely rewrote the watch mode](https://github.com/facebook/jest/pull/2362) to make it instant and more extensible. As a result, the experience of using it really is immersive: tests re-run instantly after a file change and we added a typeahead to make it easy to select the right tests.\n\n### Filename pattern typeahead\n\nFiltering by filename now has a typeahead. This is particularly useful in large codebases to tell to exactly which files match your current pattern.\n\n![typeahead-pattern](/jest/img/blog/19-typeahead-pattern.gif)\n\n### Cached test name pattern typeahead.\n\nAfter running tests once, Jest knows which specific tests are available so we also added a typeahead for running specific tests within test suites:\n![typeahead-name](/jest/img/blog/19-typeahead-name.gif)\n\n<!--truncate-->\n\n## Snapshot Updates\n\nWe made a couple of changes to the snapshot format. We don't make changes like this often and only consider them if they actually improve how snapshots work. As well as introducing a snapshot version number we accumulated a number of changes we wanted to make to the format for a while:\n\n* We dropped the ‚Äútest‚Äù prefix in snapshot names from top level `test` or `it` calls.\n* We improved the printing of React elements to cause less changes when the last prop in an element changes.\n* We improved the character escaping mechanism to be more bulletproof.\n\nBefore:\n\n```\nexports[`test snap 1`] = `\n<header>\n  <h1>\n    Jest \\\"19\\\"\n  </h1>\n  <Subtitle\n    name=\"Painless JavaScript Testing\" />\n</header>\n`;\n```\n\nAfter (no ‚Äútest‚Äù prefix, better JSX rendering, version header):\n\n```\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`snap 1`] = `\n<header>\n  <h1>\n    Jest \"19\"\n  </h1>\n  <Subtitle\n    name=\"Painless JavaScript Testing\"\n  />\n</header>\n`;\n```\n\nWe decided it's a good time to introduce versioned snapshots to ensure all developers are using a compatible version of Jest. Here's how we warn you about the need to update your snapshot:\n\n![snapshot-version](/jest/img/blog/19-snapshot-version.png)\n\nPlease make sure you revert any local changes before updating to make the transition smooth and to ensure you aren't including any unwanted changes from failing tests in your new snapshots.\n\n## Improved printing of skipped tests\n\nSkipped tests are now printed as a single line instead of showing every individual one when testing in verbose mode or a single suite. Hopefully it will let you focus on currently important tests. It also occupies far less space!\n\n![skipped-tests](/jest/img/blog/19-skipped-tests.png)\n\n## New CLI arguments\n\nJest 19 ships with two new coverage-related arguments which you can run from CLI:\n\n* `--collectCoverageFrom`\n* `--coverageDirectory`\n\nWe now also error on invalid CLI arguments instead of ignoring them. But we've got your back with helpful error message like the one below, e.g. when you try running `jest --watc`:\n\n![cli-error](/jest/img/blog/19-cli-error.png)\n\n## `expect` Improvements\n\n* [`expect.addSnapshotSerializer`](/jest/docs/expect.html#expectaddsnapshotserializerserializer)\n*  [`expect.stringContaining`](/jest/docs/expect.html#expectstringcontainingstring)\n* [`jest.spyOn`](/jest/docs/jest-object.html#jestspyonobject-methodname)\n\nWe're close to almost full feature parity with the `expect` npm package. [Michael Jackson](https://twitter.com/mjackson), the author of the package, agreed to [donate](https://github.com/facebook/jest/issues/1679) it to the Jest project, which means that `jest-matchers` will be renamed to `expect`. Since our version of `expect` is not intended to be fully compatible, [Christopher Chedeau](https://twitter.com/Vjeux) is working on a codemod to make the transition painless. Christopher also worked on a number of improvements to `jest-matchers` which enables it to be used outside of Jest and even [works inside browsers](https://github.com/facebook/jest/pull/2795).\n\n## [eslint-plugin-jest](https://github.com/facebook/jest/tree/master/packages/eslint-plugin-jest) ‚Äì our very own ESLint plugin\n\nThanks to [Jonathan Kim](https://twitter.com/jonnykim) Jest finally has its own official ESLint plugin. It exposes three rules:\n\n* [no-disabled-tests](https://github.com/facebook/jest/blob/master/packages/eslint-plugin-jest/docs/rules/no-disabled-tests.md) - this rule prevents you from accidentally committing disabled tests.\n* [no-focused-tests](https://github.com/facebook/jest/blob/master/packages/eslint-plugin-jest/docs/rules/no-focused-tests.md) - this rule prevents you from committing focused tests which would disable all other tests in the same suite.\n* [no-identical-title](https://github.com/facebook/jest/blob/master/packages/eslint-plugin-jest/docs/rules/no-identical-title.md) - disallows identical titles in test names.\n\nYou can install it using `npm install eslint-plugin-jest` or `yarn add --dev eslint eslint-plugin-jest` and it can be enabled by adding `{\"plugins\": [\"jest\"]}` to your eslint configuration.\n\n## New public package: [jest-validate](https://github.com/facebook/jest/tree/master/packages/jest-validate)\n\nWhile we refactored the validation and normalization code for Jest's configuration, we were so happy with the new error messaging that we extracted it to its own module to share it with everyone. With Jest 19 we welcome `jest-validate` to our self-sustained packages family.\n\n`jest-validate` is a generic configuration validation tool that helps you with warnings, errors and deprecation messages in your JavaScript tool. It's also capable of showing users friendly examples of correct configuration and it comes with a simple but powerful API. We hope it'll make a good addition to your projects!\n\n![validate](/jest/img/blog/19-validate.png)\n\nWe're happy to announce that `jest-validate` is validating config options of [prettier](https://github.com/jlongster/prettier) since [v0.12](https://github.com/jlongster/prettier/blob/master/CHANGELOG.md#0120). Feel free to add it to your project, try it, send us feedback and improve it by making pull requests on GitHub.\n\n## Improved asymmetric matchers\n\nWe moved the asymmetric matchers implementation from Jasmine into Jest, which enabled us to further improve the user experience around them. As a result, asymmetric matchers are now pretty-printed nicely, we added the new [`expect.stringContaining()`](http://facebook.github.io/jest/docs/expect.html#expectstringcontainingstring) matcher and we also paired them with [`expect.toMatchObject()`](http://facebook.github.io/jest/docs/expect.html#tomatchobjectobject) so you can use the best of both:\n\n![asymmetric-matchers](/jest/img/blog/19-asymmetric-matchers.png)\n\n## Better manual mocks\n\nWith the latest release, manual mocks now finally work with nested folders. For example `__mocks__/react-native/Libraries/Text/Text.js` will now work as expected and mock the correct module. We also fixed issues with virtual mocks and transitive dependencies and improved `moduleNameMapper` to not overwrite mocks when many patterns map to the same file.\n\n## Breaking Changes\n\nAs a part of our cleanups and fixes we removed the `mocksPattern` configuration option which was never officially supported. We also renamed the `testPathDirs` configuration option to `roots` which better explains what the option can be used for. The default configuration for `roots` is `[\"<rootDir>\"]` and can be customized to include any number of directories. The rootDir configuration option has always been used mostly as a token for other configuration options and this rename should make configuring Jest clearer.\n\n## Revamped documentation\n\nAs you may have already seen, [Hector Ramos](https://twitter.com/hectorramos) and [Kevin Lacker](https://twitter.com/lacker) gave Jest's documentation a fresh new look. We changed the way we organize the website and it now features Docs and API as separate pages:\n\n* Under [Docs](https://facebook.github.io/jest/docs/getting-started.html#content) you can find an introduction to Jest, including [Getting Started](https://facebook.github.io/jest/docs/getting-started.html#content) or [Testing Asynchronous Code](https://facebook.github.io/jest/docs/asynchronous.html#content) and handy guides like [Snapshot Testing](https://facebook.github.io/jest/docs/snapshot-testing.html#content), [Testing React Native App](https://facebook.github.io/jest/docs/tutorial-react-native.html#content), [Using with webpack](https://facebook.github.io/jest/docs/webpack.html#content) or [Migrating to Jest](https://facebook.github.io/jest/docs/migration-guide.html#content) and many more!\n* The [API](https://facebook.github.io/jest/docs/api.html) section on the other hand lists all available methods exposed by Jest: the `expect` and `jest` objects, mock functions, globals, along with configuration options from *package.json* and from the CLI.\n\n\n\nThe homepage was completely redesigned to be more descriptive of what Jest is about: ‚Äú*Zero configuration testing platform*‚Äù. We also made sure it reads better on mobile devices. And for those using RSS ‚Äì we finally provide a [feed for our blog](http://facebook.github.io/jest/blog/feed.xml).\n\n## Community Updates\n\n* We really loved this talk: ‚Äú[Introduction to Jest](https://www.youtube.com/watch?v=tvy0bSgwtTo)‚Äú by Vas Boroviak.\n* Follow [@fbjest on Twitter](http://twitter.com/fbjest).\n* The Jest Core team syncs once a week to discuss current and future issues. If you'd like to work on Jest, let us know, submit a few pull requests and join our weekly team meetings.\n* The awesome engineers at Artsy wrote [about Jest as part of their 2017 frontend stack](http://artsy.github.io/blog/2017/02/05/Front-end-JavaScript-at-Artsy-2017/).\n* Stephen Scott wrote a detailed article about [testing React components](https://medium.freecodecamp.com/the-right-way-to-test-react-components-548a4736ab22) in which he weighs the pros and cons of different approaches.\n* [Using Jest with vue.js](https://medium.com/@kentaromiura_the_js_guy/jest-for-all-episode-1-vue-js-d616bccbe186#.r8ryxlw98) got a lot easier after reading Cristian Carlesso's blog post.\n* [Michele Bertoli wrote a book about React Design Patterns and Best Practices](https://twitter.com/cpojer/status/825004258219130880) which features an entire section about Jest.\n* Improved `--notify` command that shows an operating system notification which [can now also re-run tests from the notification](https://github.com/facebook/jest/pull/2727). This is actually a Jest feature and we are just checking if you are still reading this blog post.\n* Jest is now part of [react-boilerplate](https://twitter.com/mxstbr/status/820326656439177217).\n* Read about the [hidden powers of Jest's matchers](https://medium.com/@boriscoder/the-hidden-power-of-jest-matchers-f3d86d8101b0#.pn10z1pzx).\n\nFinally, we are happy to announce that the [ava](https://github.com/avajs/ava) test runner has adopted parts of the Jest platform and is now shipping with basic [snapshot support](https://github.com/avajs/ava#snapshot-testing) and is using [pretty-format](https://github.com/facebook/jest/tree/master/packages/pretty-format). Consolidating test infrastructure makes it easier to learn how to test applications and enables us to share best practices. We are looking forward to see what we can learn from existing test libraries in the future.\n\nThe full [changelog can be found on GitHub](https://github.com/facebook/jest/blob/master/CHANGELOG.md#jest-1900). Jest 19 was a true JavaScript community effort with [17 people who contributed](https://github.com/facebook/jest/graphs/contributors?from=2016-12-23&to=2017-02-21&type=c) to this release. We thank each and every one of you for your help to make this project great.\n\n*This blog post was written by [Rogelio Guzman](https://twitter.com/rogeliog) and [Micha≈Ç Pierzcha≈Ça](https://twitter.com/thymikee).*\n",
    "title": "üÉè Jest 19: Immersive Watch Mode & Test Platform Improvements",
    "author": "Rogelio Guzman",
    "authorURL": "http://twitter.com/rogeliog",
    "authorFBID": 511230566,
    "id": "üÉè Jest 19: Immersive Watch Mode & Test Platform Improvements"
  },
  {
    "path": "2017/01/30/a-great-developer-experience.html",
    "content": "\nWe strongly believe that great documentation is crucial to providing a great developer experience. The docs should be clear, concise, and useful to new users and veterans alike. With that in mind, we recently took some time to overhaul the Jest website.\n\n## Improved docs\n\nOne of the changes you'll notice upon visiting our docs is the updated sidebar. The documentation is now divided into three main areas: an introduction to Jest, detailed guides to Jest's features, and a comprehensive API reference.\n\nThe **Introduction** section will guide you from installing Jest and writing your first case, to using Jest's matchers and testing async code. If you're new to Jest or need a quick refresher, these docs should get you up to speed in no time. If you've used Jest before and only need a quick reference on how it's installed, you need to go no further than the [Getting Started](/jest/docs/getting-started.html) guide.\n\nOnce you feel comfortable using Jest, proceed to the advanced **Guides** section. The new [Snapshot Testing guide](/jest/docs/snapshot-testing.html) covers everything you need to know about creating and maintaining snapshot test cases.\n\nFinally, we've completely overhauled our API reference docs. You can now find detailed information on all of Jest's [Globals](/jest/docs/api.html), [matchers](/jest/docs/expect.html), and [every flag](/jest/docs/cli.html) supported by the `jest` CLI.\n\n<!--truncate-->\n\n## New colors & website\n\nThe colors in the Jest logo and on the website have felt outdated to us for a while. We changed the color scheme we are using for Jest and changed the landing page significantly to be more inviting. We hope you like the new colors and showcase of Jest's strengths.\n\n## Who's using Jest?\n\nWe have created a [showcase of users](/jest/users.html) to highlight some of the companies that are using Jest. We're thankful to all of these companies for using Jest to test their websites, mobile apps, and APIs. If you're using Jest, check out the guidelines on GitHub and send us a pull request!\n\n<div class=\"productShowcaseSection\">\n <div class=\"logos\">\n   <img src=\"/jest/img/logos/twitter.png\" title=\"Twitter\"/>\n   <img src=\"/jest/img/logos/pinterest.png\" title=\"Pinterest\"/>\n   <img src=\"/jest/img/logos/paypal.png\" title=\"PayPal\"/>\n   <img src=\"/jest/img/logos/ibm.png\" title=\"IBM\"/>\n   <img src=\"/jest/img/logos/spotify.png\" title=\"Spotify\"/>\n </div>\n</div>\n\n## Jest in the browser\n\nAs highlighted [last month](/jest/blog/2016/12/15/2016-in-jest.html), it is now possible to use Jest directly in the browser using [repl.it](https://repl.it/languages/jest). If you want to try out Jest before installing it, you can easily do so below or directly from the Jest homepage. Go ahead and give it a try!\n\n<div class=\"jest-repl\">\n  <iframe src=\"https://repl.it/languages/jest?lite=true\"></iframe>\n</div>\n\n## Get involved\n\nThis is just the start. Go ahead and take a look at the docs, and don't hesitate to send any feedback our way. If you find a mistake in the docs or you just want to let us know what needs to be documented better, please tweet at us at [@fbjest](https://twitter.com/fbjest), [open an issue on GitHub](https://github.com/facebook/jest/issues), or send us a PR by clicking \"Edit on GitHub\" at the top of the doc.\n\nWe're really excited for the year ahead and can't wait to hear from you!\n",
    "title": "A Great Developer Experience",
    "author": "H√©ctor Ramos",
    "authorURL": "http://twitter.com/hectorramos",
    "authorFBID": 121800083,
    "id": "A Great Developer Experience"
  },
  {
    "path": "2016/12/15/2016-in-jest.html",
    "content": "\n2016 was a big year for JavaScript testing with Jest. In the first six months of the year we rewrote Jest and built a solid foundation to significantly improve performance and the developer experience of testing JavaScript code. We flow-typed the entire codebase, built a ton of integration tests for Jest itself and adopted [lerna](https://lernajs.io/) to turn Jest from a framework into a [*Painless JavaScript Testing platform*](https://github.com/facebook/jest/tree/master/packages).\n\nThe newly created [react-test-renderer](https://www.npmjs.com/package/react-test-renderer) finally enabled testing of react-native components. Through the jest-react-native preset (now merged directly into react-native) Jest now works out of the box for any React project and comes pre-configured in [create-react-app](https://github.com/facebookincubator/create-react-app) and [react-native](https://github.com/facebook/react-native) projects. We integrated core pieces of Jest into [react-native's packager](https://github.com/facebook/react-native/tree/master/packager/react-packager/src) and the completely new snapshot testing feature has since been used outside of Jest: It was integrated with React Storybook as ‚Äú[storyshots](https://github.com/storybooks/storyshots)‚Äù and is being adopted by other test runners like [ava](https://github.com/avajs/ava/pull/1113).\n\n<!--truncate-->\n\nThe [pretty-format](https://github.com/facebook/jest/tree/master/packages/pretty-format) project was rewritten with performance in mind to drive Jest's snapshot feature, was recently merged into Jest's monorepo and is also helpful in other [test runners](https://github.com/avajs/ava/pull/1154). Nowadays Jest is much more about collecting different ideas and solutions to testing than it is about one specific implementation of a test framework.\n\nI'd like to deeply thank all the people that have [contributed to Jest this year](https://github.com/facebook/jest/graphs/contributors?from=2016-01-01&to=2016-12-14&type=c), both from the open source community and at Facebook: Dmitrii Abramov, Cristian Carlesso, Dan Abramov, Daniel Lo Nigro, Maxim Derbin, Evan Scott, Forbes Lindesay, Keyan Zhang and 60 more people. We'd also like to welcome [Micha≈Ç Pierzcha≈Ça (@thymikee)](https://twitter.com/thymikee) as first official external contributor to Jest. He's been doing a great job managing the issues and PRs on the repo. If you'd like to start contributing to Jest, we have a bunch of [good first tasks](https://github.com/facebook/jest/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+bug%22) and we are always happy to help on our [discord channel](https://facebook.github.io/jest/support.html).\n\n## [repl.it](http://repl.it/) with Jest integration\n\nAmjad Massad [built a Jest container](https://repl.it/languages/jest) so you can now try out Jest directly in the browser. You can use it from now on when creating GitHub issues which should help troubleshoot problems more quickly. Amjad and Haya are building [repl.it](http://repl.it/) to democratize programming by building powerful yet simple tools and platforms for educators, learners, and developers. They are also [hiring talented engineers](https://repl.it/site/jobs)!\n\n<div class=\"jest-repl\">\n  <iframe src=\"https://repl.it/languages/jest?lite=true\"></iframe>\n</div>\n\n## Community Update\n\nWe feel incredibly humbled that 100+ companies [have adopted Jest](https://twitter.com/cpojer/status/803965499407290369) in the last six months. Companies like Twitter, Pinterest, Paypal, nytimes, IBM (Watson), Spotify, eBay, SoundCloud, Intuit, FormidableLabs, Automattic, Trivago and Microsoft have either fully or partially switched to Jest for their JavaScript testing needs. Thank you very much for giving this project a chance. We would also like to thank everyone who went to conferences and meetups to speak about Jest and to everyone who is writing blog posts about how Jest is or isn't working for them!\n\nHere is what happened in the community in the last two months:\n\n* Jason Bonta and Dmitrii Abramov [redefined the ‚Äútesting pyramid‚Äù](https://twitter.com/abramov_dmitrii/status/805913874704674816) we were talking a lot about at Facebook.\n* [jest-codemods](https://github.com/skovhus/jest-codemods#jest-codemods) now allows you to painlessly migrate from Mocha, Tape and Ava to Jest.\n* The React team announced [improvements to the react-test-renderer](https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html) in 15.4.0.\n* Orta Therox build an amazing [vscode-jest integration](https://github.com/orta/vscode-jest#the-aim) and donated the code for editor support to Jest.\n* Pavithra Kodmad is documenting [Flipkarts adoption of Jest](http://pksjce.github.io/2016/12/08/notes-on-jest) and shares some getting started tips.\n* Kent C. Dodds wrote about [migrating to Jest at Paypal](https://medium.com/@kentcdodds/migrating-to-jest-881f75366e7e#.ticf0wchu) and Jason Brown [wrote about migrating to Jest as well](http://browniefed.com/blog/migrating-ava-to-jest/).\n* Ben McCormick wrote about [saving time with Jest](http://benmccormick.org/2016/12/10/saving-time-with-jest/).\n* Eric Clemmons wrote about [snapshots and storybook integration](https://medium.com/@ericclemmons/jest-snapshots-for-storybook-5bf36b5e5a3a).\n* Edvin Erikson wrote about [getting Tap output in Jest](https://medium.com/@edvinerikson/getting-jest-output-in-tap-format-6e07dc2c484c#.1l4edixhl).\n* [jest-html](https://github.com/guigrpa/jest-html#jest-html--) can bring snapshot diffing to your browser.\n* There were a few [great conversations on hackernews](https://news.ycombinator.com/item?id=13128146) about Jest.\n* The community started a great discussion about the [future of enzyme](https://github.com/airbnb/enzyme/issues/715).\n* Ruben Oostinga wrote about [combining chai and Jest matchers](https://medium.com/@RubenOostinga/combining-chai-and-jest-matchers-d12d1ffd0303#.87si0ra2h).\n* Emil Ong wrote about why [‚ÄúTDD'ing your frontend seems pointless‚Äù](https://engineering.haus.com/why-tdding-your-frontend-feels-pointless-5f710fea7325#.pql79knnm).\n* Nate Hunzaker wrote about [end-to-end testing with Jest and Nightmare](https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare).\n* [Using Jest with Angular just works](https://medium.com/aya-experience/testing-an-angularjs-app-with-jest-3029a613251#.h9badqevy) according to Matthieu Lux.\n* A fantastic conversation about the [purpose of snapshot testing](https://github.com/facebook/jest/issues/2197) is happening right now.\n* Dmitrii made a new [music video with his metal band](https://twitter.com/abramov_dmitrii/status/806613542447157248).\n* [lazyspec](https://www.npmjs.com/package/lazyspec) can help you create smoke tests quickly if you are introducing tests to an existing codebase.\n* Patrick Stapfer did a lightning talk about [vim and Jest](https://twitter.com/ryyppy/status/803871975995277312).\n* Mark Dalgleish was [commenting on the value of snapshot testing](https://twitter.com/markdalgleish/status/806608159527747584).\n\n## New features, changes and fixes in Jest 17 & 18\n\nJest was initially created more than five years ago and as such an old framework it has accumulated some technical debt. This is why we tend to make breaking changes more often than may seem necessary: We believe it is important to incrementally reduce technical debt to ensure that Jest as a project stays maintainable long-term. We didn't announce Jest 17 in a blog post and if you haven't upgraded to it in the last month you may find the [changelog](https://github.com/facebook/jest/blob/master/CHANGELOG.md) useful.\n\n* **Breaking:** Removed `pit` in favor of `it` or `test` and `mockImpl` in favor of `jest.fn()` or  `mockImplementation` .\n* **Breaking:** Renamed `--jsonOutputFile` to `--outputFile`.\n* **Breaking:** Updated `testRegex` to include `test.js` and `spec.js` files.\n* **Breaking:** Replaced `scriptPreprocessor` with the new `transform` option.\n* **Breaking:** The `testResultsProcessor` function is now required to return the modified results.\n* **Potentially Breaking:** Properly resolve `snapshotSerializers`, `setupFiles`, `transform`, `testRunner` and `testResultsProcessor` with a resolution algorithm instead of using `path.resolve`. This mainly means that `<rootDir>` is no longer needed for these options.\n* **Added: **`pretty-format` and `jest-editor-support` were merged into Jest.\n* **Added:** `expect.any`, `expect.anything`, `expect.objectContaining`, `expect.arrayContaining`, `expect.stringMatching`.\n* **Added: **`--testResultsProcessor` is now exposed through the cli.\n* **Added:** Implemented file watching in `jest-haste-map`.\n* **Added:** Usage of Jest in watch mode can be hidden through `JEST_HIDE_USAGE`.\n* **Added:** `expect.assertions(number)` which will ensure that a specified amount of assertions is made in one test.\n* **Added: **`.toMatchSnapshot(?string)` feature to give snapshots a name.\n* **Added: **`toMatchObject`, `toHaveProperty` , `toHaveLength` matchers.\n* **Added:** `expect.extend`.\n* **Added:** Added support for custom snapshots serializers.\n* **Added:** Big diffs are now collapsed by default in snapshots and assertions. Added `--expand` (or `-e`) to show the full diff.\n* **Added:** `jest.resetAllMocks` which replaces `jest.clearAllMocks`.\n* **Added: **`--json` now includes information about individual tests inside a file.\n* **Fixed: **`test.concurrent` unhandled promise rejections.\n* **Fixed:** `babel-plugin-jest-hoist` when using `jest.mock` with three arguments.\n* **Fixed:** The `JSON` global in `jest-environment-node` now comes from the vm context instead of the parent context.\n* **Fixed:** Jest does not print stack traces from babel any longer.\n* **Fixed:** Fake timers are reset when `FakeTimers.useTimers()` is called.\n* **Fixed:** Regular expressions are properly escaped in snapshots.\n* **Fixed:** Improved pretty printing of large objects.\n* **Fixed:** `NaN% Failed` in the OS notification when using `--notify`.\n* **Fixed:** The first test run without cached timings will now use separate processes instead of running in band.\n* **Fixed:** `Map`/`Set` comparisons.\n* **Fixed: **`test.concurrent` now works with `--testNamePattern`.\n* **Fixed:** Improved `.toContain` matcher.\n* **Fixed:** Properly resolve modules with platform extensions on react-native.\n* **Fixed:** global built in objects in `jest-environment-node` now work properly.\n* **Fixed:** Create mock objects in the vm context instead of the parent context.\n* **Fixed: **`.babelrc` is now part of the transform cache key in `babel-jest`.\n* **Fixed:** docblock parsing with haste modules.\n* **Fixed:** Exit with the proper code when the coverage threshold is not reached.\n* **Fixed: **Jest now clears the entire scrollback in watch mode.\n* **Deprecated: **`jest-react-native` was deprecated and now forwards `react-native`.\n\n## Plans for Jest in H1 2017\n\nSix months ago [we shared our plans for Jest](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html#what-s-next-for-jest) and we are happy that we were able to execute well on almost all of them. For the next six months, here is what we are planning:\n\n* **Instant feedback:** [Nuclide](https://nuclide.io/) integration and an improved and [faster watch mode](https://github.com/facebook/jest/pull/2324#issuecomment-267149669).\n* **Improved developer experience:** new mocking APIs and improved assertions.\n* **Better performance and memory usage:** analyze Jest and be more conscious about efficiency.\n* **Snapshot Improvements: **snapshot approval mode, syntax highlighting and improved `react-test-renderer` APIs.\n* **Website:** We'll overhaul the website and documentation and add a Jest cheat sheet.\n\nWe won't be providing timelines or estimates for these features and we may not actually get to all of these things. If you'd like to help make these things a reality, send us issues and pull requests with your ideas and let's work on improving Jest together in 2017.\n",
    "title": "2016 in Jest",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "2016 in Jest"
  },
  {
    "path": "2016/10/03/jest-16.html",
    "content": "\nIt's been one month since the last major release and we've made significant improvements to Jest since. In this major release we are updating the snapshot format we are using which will likely require snapshots to be updated when upgrading Jest. We don't make these changes lightly and don't expect this to happen often but we think it is necessary to improve the format from time to time.\n\n## Upgraded CLI\n\n![reporter](/jest/img/blog/16-reporter.gif)\n\nJest 16 features a new reporter interface that shows running tests as well as a live summary and a progress bar based on the estimated test runtime from previous test runs. We also improved the CLI output to work better with different color schemes. If there were test failures in a previous run, Jest will now always run those tests first to give useful signal to users as quickly as possible.\n\n<!--truncate-->\n\nWe also added a lot of new features which you may find useful:\n\n* New CLI flags were added: A `--testNamePattern=pattern` or `-t <pattern>` option was added to filter tests from the command line much like `it.only` or `fit` does in tests.\n* Previously failed tests now always run first.\n* `jest <pattern>`  is now case-insensitive to make it easier to filter test files.\n* A test run in watch mode can now be interrupted. During a test run, simply press any of the keys used for input during watch mode (`a`, `o`, `p`, `q` or `enter`) to abort a test run and start a new one.\n* The `--bail` flag now also works in watch mode. Together with running failed tests first, Jest's watch mode will now feel turbocharged!\n* Jest now automatically considers files and tests with the `jsx` extension.\n* Jest warns about duplicate manual mock files and we improved automatically created mocks for ES modules compiled with babel.\n* A `jest.clearAllMocks` function was added to clear all mocks in between tests.\n* We improved module resolution when `moduleNameMapper` is used.\n* Finally, a `--findRelatedTests <fileA> <fileB>` cli option was added to run tests related to the specified files. This is especially helpful as a pre-commit hook if you'd like to run tests only on a specified set of files that have tests associated with them.\n\nThis is what Jest looks like when a test run is interrupted in watch mode:\n![watch](/jest/img/blog/16-watch.gif)\n\n## Snapshot Updates\n\nJest's snapshot implementation was completely rewritten. The new version of the `jest-snapshot` package is now structured in a way that allows for easier integration into other test runners and enables more cool integrations like with [React Storybook](https://voice.kadira.io/snapshot-testing-in-react-storybook-43b3b71cec4f#.qh4lzcadb). Jest doesn't mark snapshots as obsolete in a file with skipped or failing tests. We also made a number of changes to the snapshot format:\n\n* Objects and Arrays are now printed with a trailing comma to minimize future changes to snapshots.\n*  We removed function names from snapshots. They were causing issues with different versions of Node, with code coverage instrumentation and we generally felt like it wasn't useful signal to show to the user that the name of a function has changed.\n* Snapshots are now sorted using natural sort order within a file.\n\nWhen upgrading to Jest 16, the diff might look similar to this one:\n![snapshots](/jest/img/blog/16-snapshots.png)\n\n## Test Library Updates\n\nWe finished the migration of Jasmine assertions to the new Jest matchers. We added three new matchers: `toBeInstanceOf`, `toContainEqual` and `toThrowErrorMatchingSnapshot` . We have more readable failure messages for the spy/mock matchers `toHaveBeenLastCalledWith`, `toHaveBeenCalledWith`, `lastCalledWith` and `toBeCalledWith`. Now that we have rewritten all assertions and separated them into their own package, we'll be working on making them standalone so they can be integrated into any test framework if you'd like to use them outside of Jest.\n\nWe also added a bunch of aliases that were requested by the community. To make Jest focus on a single test you can now use either `it.only` or `test.only` or keep using `fit`; For skipping a test, `it.skip` or `test.skip` are now available alongside of `xit`; finally to define a test as concurrent you can use `test.concurrent` which is useful in case your test accesses network resources or databases.\n\nFinally, if you'd like to overwrite the `expect` global with a different assertion library like [chai](http://chaijs.com/), this can now be done using the `setupTestFrameworkScriptFile` configuration option.\n\n## Community Update\n\nOver the last month lots of articles were written about Jest's snapshot testing feature, how to migrate to Jest and how to get started writing tests. I also did a few live videos to explain how Jest and snapshot testing works:\n\n* [FB Live Video about Snapshot Testing](https://www.facebook.com/react/videos/1035427199869020/).\n* [JavaScript & React Testing with Kent C. Dodds](https://www.youtube.com/watch?v=i31VtyJSM-I&feature=youtu.be).\n\nA number of people wrote articles about snapshot testing. The most opinionated article that resonated with the Jest team was ‚Äú[Testing with Jest Snapshots: First Impressions](http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/)‚Äù. Ben makes three great points in his blog post:\n\n1. Snapshot tests are a complement for conventional tests not a replacement.\n2. Snapshot tests are more useful with a healthy code review process.\n3. Snapshot tests work well with auto-mocking.\n\nWe highly recommend reading the entire blog post. Ben did a fantastic job explaining the reasons why we built snapshot testing. It's important to point out that we didn't introduce snapshot testing to replace all other forms of testing but rather as a way to enable engineers to write tests for code that they otherwise wouldn't write tests for. It works well for things like React components, CLI output, error messages and many others but it doesn't solve all problems. Jest's goal is to provide many different ways to write effective tests without sacrificing performance or the project's maintainability.\n\nOther highlights about snapshot testing:\n\n* A React Native testing series: [Part 1: Jest ‚Äì Snapshot come into play](https://blog.callstack.io/unit-testing-react-native-with-the-new-jest-i-snapshots-come-into-play-68ba19b1b9fe) and [Part 2: Jest ‚Äì Redux Snapshots for your Actions and Reducers](https://blog.callstack.io/unit-testing-react-native-with-the-new-jest-ii-redux-snapshots-for-your-actions-and-reducers-8559f6f8050b#.putt9eipm).\n* [How we landed on Jest snapshot testing for JavaScript](https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript).\n* [Picture This: Snapshot Testing](http://guigrpa.github.io/2016/09/27/picture-this-snapshot-testing/).\n* [Snapshot testing with React Storybook](https://voice.kadira.io/snapshot-testing-in-react-storybook-43b3b71cec4f).\n* [Testing React and Redux Applications](https://medium.com/@ryancollinsio/testing-react-redux-applications-fee79ac0087f#.lyjl7st1n).\n* If you are using the popular [enzyme](https://github.com/airbnb/enzyme) testing utility, there is now a project [enzyme-to-json](https://github.com/trayio/enzyme-to-json) which makes it possible to use Jest's snapshot testing feature together with enzyme.\n\n[Redux itself now uses Jest](https://github.com/reactjs/redux/commit/7296d3cba1f5f899bdee5ef6695a8d21149f8d6c) and Max Stoiber wrote a [tutorial on how to test code written with redux](http://academy.plot.ly/react/6-testing/). There is also a great [guide on how to write tests for MobX](https://semaphoreci.com/community/tutorials/how-to-test-react-and-mobx-with-jest). If you are using [create-react-app](https://github.com/facebookincubator/create-react-app), Jest is now included by default. Kent C. Dodds created a ton of [videos on egghead.io](https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature?pl=testing-javascript-with-jest-a36c4074) that will help you get started with Jest.\n\nIf you are using other test runners, Kenneth Skovhus built an awesome [jest-codemods](https://github.com/skovhus/jest-codemods) library that will automate the conversion for you. Codemods are awesome: they'll allow you to quickly evaluate whether Jest will work for you. Give it a try!\n\nThe full [changelog can be found on GitHub](https://github.com/facebook/jest/blob/master/CHANGELOG.md#jest-1600). Jest 16 was a true JavaScript community effort and the project now has more than 220 contributors. We thank each and every one of you for your help to make this project great.\n",
    "title": "Jest 16.0: Turbocharged CLI & Community Update",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "Jest 16.0: Turbocharged CLI & Community Update"
  },
  {
    "path": "2016/09/01/jest-15.html",
    "content": "\nWe spent the past year making Jest [faster](http://facebook.github.io/jest/blog/2016/03/11/javascript-unit-testing-performance.html), [easier to configure](http://facebook.github.io/jest/blog/2016/04/12/jest-11.html), [added tons of features](http://facebook.github.io/jest/blog/2016/06/22/jest-13.html) and built [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html). However, there were two areas where we invested very little: the CLI output and user experience. With Jest 15 we are changing the framework radically to make it easier to use both for beginners and experienced users. We are excited that our investment in Jest is now paying off: we can move fast and improve the framework for Facebook and the open source community at light-speed. Jest's goal is to come with batteries included and to require as little configuration as necessary. We recently got a chance to explain our philosophy on a [create-react-app issue](https://github.com/facebookincubator/create-react-app/pull/250#issuecomment-237098619).\n\nThe most important change to talk about is a set of [new defaults](https://github.com/facebook/jest/pull/1511). If you are an existing Jest user you will very likely need to update your configuration for Jest 15. In most cases it will simplify your setup and Jest will provide useful error messages during the upgrade. All of the new defaults can be disabled to suit your needs, but we still consider the disabled features critical for Jest in certain situations and will continue to use and support them at Facebook long-term. Our [API documentation](https://facebook.github.io/jest/docs/api.html) was also completely rewritten to reflect these changes. [This pull request for React](https://github.com/facebook/react/pull/7625/files) highlights some of the changes necessary for existing projects.\n\n<!--truncate-->\n\n## New CLI error messages and summaries\n\nAs part of our effort to remove Jasmine incrementally within Jest, replacing all Jasmine matchers was almost completed. A lot of time was spent tweaking every error message for every matcher to give the best signal to users when a test is failing ‚Äì the time when Jest should provide the most value to you. In addition to printing the expected and received values, a diff is printed for the `toBe` and `toEqual` matchers to help spot mistakes. More colors were added and relevant files from stack traces are highlighted more prominently.\n\nHere is a comparison of the before and after on a light terminal:\n![failure1](/jest/img/blog/15-failure1.png)\nIt also works well with darker colors:\n![failure2](/jest/img/blog/15-failure2.png)\n\n## New watch command\n\nWe completely rewrote `jest --watch` to be more interactive. It can now switch between running all tests or only test files related to changed files by pressing `a` or `o`. By pressing `p` a prompt appears that allows to specify a test pattern to focus on a specific set of files. Snapshot tests can be updated by pressing `u`.\n\n![watch](/jest/img/blog/15-watch.gif)\n\n## jest-react-native improvements\n\nMocks for `ListView`, `TextInput`, `ActivityIndicator`, `ScrollView` and more were added. The existing mocks were updated to use the real implementations and existing snapshots likely have to be updated when upgrading to Jest 15. A `mockComponent` function was added to `jest-react-native` that can be used to mock native components:\n\n```\njest.mock('MyNativeComponent', () => {\n  const jestReactNative = require('jest-react-native');\n  return jestReactNative.mockComponent('MyNativeComponent');\n});\n```\n\nThere have also been a number of improvements around mocking images, the fetch module and other native APIs.\n\n## Buffered Console Messages\n\nJest parallelizes test runs across workers to maximize performance. Previously Jest used to forward console messages from workers to the parent and printed them immediately. When running multiple tests in parallel, it was often hard to find out which test and which module was calling a log function. In Jest 15, all console messages are buffered and printed together with individual test results. In addition the file and line number of the log call is printed so the code can easily be inspected.\n\nCompare the output of the previous version of Jest and Jest 15:\n![console](/jest/img/blog/15-console.png)\n\n## Disabled Automocking\n\nAutomocking is now disabled by default in Jest. This is by far the most confusing feature for new users and in many ways it doesn't make sense for small projects. We introduced automocking at Facebook and it worked great for us when unit testing was adopted in a large existing code base with few existing tests, but over time it felt like people spent more time fighting with mocked/unmocked modules than it would have taken them to write a test normally. We also noticed that library authors often require a huge number of basic modules that always have to be manually unmocked. Even for Jest itself we realized that the majority of tests had automocking disabled manually. We still believe that explicit automocking can be incredibly valuable. This change simply trades implicit mocks for explicit mocks via calls to `jest.mock(moduleName)`.\n\nIf you would still like to use automocking by default, enable the `automock` setting in your configuration or manually call `jest.enableAutomock()` in your test or setup file.\n\n## Test File Patterns\n\nNot everyone uses the same convention of using a `__tests__` folder to store tests. Jest 15 also looks for files ending in `.spec.js` or `.test.js`, two popular community standards. Jest 15 also removes the `testDirectoryName` and `testFileExtensions` configuration options and asks users to switch to the `testRegex` option when the old configuration options are used.\n\n## Module Registry Persistence\n\nJest used to implicitly reset all modules before each test and we recommended requiring modules in `beforeEach` or inside of tests. This is useful when modules have local state that shouldn't be shared between tests. However, two big shifts happened: ES modules with the top-level `import` syntax and a renewed interest in writing stateless functional modules.\n\nThis has lead to numerous incompatibilities. We also noticed that at Facebook we weren't even using this implicit reset. Instead we relied on explicit calls to `jest.resetModules()` which puts engineers in control on when to wipe away all state.\n\nHere is an example:\n\n```\nconst React1 = require('react');\njest.resetModules();\nconst React2 = require('react');\n\nReact1 !== React2 // These two are separate copies of React.\n```\n\nThe call to `resetModules` wipes away the require cache. A second call to require the same module will result in a new instantiation of the same module and all of its dependencies. This feature is especially useful when dealing with modules that have side effects, like [jest-haste-map](https://github.com/facebook/jest/blob/3bbf32a239fc4aad8cc6928a787f235bd86fecac/packages/jest-haste-map/src/__tests__/index-test.js#L64).\n\nWe believe it is better to put users in control so we disabled the implicit reset. Modules can be reset using `jest.resetModules()` in code and the `resetModules` option can be enabled in the configuration to bring back the previous behavior.\n\n## Real vs Fake Timers\n\nBy default Jest used to mock all timer functions like `setTimeout` or `process.nextTick` and provided an API `jest.runAllTimers()` to advance timers programatically. This is useful when a piece of code sets a long timeout that we don't want to wait for in a test.\n\nHowever we found that most of the time the use cases are quite isolated. [Async programming](http://facebook.github.io/jest/docs/tutorial-async.html) has also become much simpler in our test runner. Jest now uses the real timers by default.\n\nYou can still override this by specifying  `\"timers\": \"fake\"`  in the configuration or by calling `jest.useRealTimers()` and `jest.useFakeTimers()` global switches.\n\n## setupEnvScriptFile vs setupFiles\n\nThe `setupEnvScriptFile` configuration option has been deprecated for a while. Jest 15 removes it completely and replaces it with `setupFiles`. This option expects an array of file paths that are loaded in order before a test file is executed.\n\n## Rewritten Code Coverage Support\n\nCode coverage in Jest can be used through `jest --coverage` and requires no additional packages or configuration. Code coverage support was completely rewritten and a new `collectCoverageFrom` option was added to collect code coverage information from entire projects, including **untested files**. Note that this option uses globs as we are hoping to further simplify configuration options in the future and provide a simpler alternative to regular expressions. See Jest's [package.json](https://github.com/facebook/jest/blob/9088f6517813f6c089cf52e980d6579511dcde88/package.json#L47) for an example.\n\n## Other Improvements\n\nA huge number of other improvements were also made:\n\n* Improved performance of small test runs.\n* Jest now uses verbose mode when only a single test file is executed.\n* Added an `--env` option to override the configured test environment.\n* `moduleNameMapper` now uses a resolution algorithm.\n* Jest now works with paths that have special characters in them, like parenthesis.\n* Added `global.global` to the node environment.\n* Fixed `babel-plugin-jest-hoist`'s invalid error when a random user function was called `mock`.\n* Fix `testEnvironment` resolution to prefer `jest-environment-{name}` instead of `{name}` only. This prevents a module collision when using `jsdom` as test environment.\n* Improvements to Jest's own test infra by merging integration and unit tests. Code coverage is now collected for Jest.\n\nWe are happy when looking back at all the changes we have made together with the help from the community and couldn't be more excited to make Jest even better over the course of the next few months. Please [file an issue](https://github.com/facebook/jest/issues) if something isn't working as expected and send us pull requests.\n\nNext up: [Concurrent Reporter](https://github.com/facebook/jest/pull/1480).\n",
    "title": "Jest 15.0: New Defaults for Jest",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "Jest 15.0: New Defaults for Jest"
  },
  {
    "path": "2016/07/27/jest-14.html",
    "content": "\nOne of Jest's philosophies is to provide an integrated ‚Äúzero-configuration‚Äù experience. We want to make it as frictionless as possible to write good tests that are useful. We observed that when engineers are provided with ready-to-use tools, they end up writing more tests, which in turn results in stable and healthy code bases.\n\nOne of the big open questions was how to write React tests efficiently. There are plenty of tools such as [ReactTestUtils](https://facebook.github.io/react/docs/test-utils.html) and [enzyme](http://airbnb.io/enzyme/). Both of these tools are great and are actively being used. However engineers frequently told us that they spend more time writing a test than the component itself. As a result many people stopped writing tests altogether which eventually led to instabilities. Engineers told us all they wanted was to make sure their components don't change unexpectedly.\n\n<!--truncate-->\n\nTogether with the React team we created a new test renderer for React and added snapshot testing to Jest. Consider this [example test](https://github.com/facebook/jest/blob/master/examples/snapshot/__tests__/Link.react-test.js) for a simple [Link component](https://github.com/facebook/jest/blob/master/examples/snapshot/Link.react.js):\n\n```javascript\nimport renderer from 'react-test-renderer';\ntest('Link renders correctly', () => {\n  const tree = renderer.create(\n    <Link page=\"http://www.facebook.com\">Facebook</Link>\n  ).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\nThe first time this test is run, Jest creates a [snapshot file](https://github.com/facebook/jest/blob/master/examples/snapshot/__tests__/__snapshots__/Link.react-test.js.snap) that looks like this:\n\n```javascript\nexports[`Link renders correctly 1`] = `\n<a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function bound _onMouseEnter]}\n  onMouseLeave={[Function bound _onMouseLeave]}>\n  Facebook\n</a>\n`;\n```\n\nThe snapshot artifact should be committed alongside code changes. We use [pretty-format](https://github.com/thejameskyle/pretty-format) to make snapshots human-readable during code review. On subsequent test runs Jest will simply compare the rendered output with the previous snapshot. If they match, the test will pass. If they don't match, either the implementation has changed and the snapshot needs to be updated with `jest -u`, or the test runner found a bug in your code that should be fixed.\n\nIf we change the address the Link component in our example is pointing to, Jest will print this output:\n\n![snapshot-testing](/jest/img/blog/snapshot.png)\n\nNow you know that you either need to accept the changes with `jest -u`, or fix the component if the changes were unintentional.\nTo try out this functionality, please clone the [snapshot example](https://github.com/facebook/jest/tree/master/examples/snapshot), modify the Link component and run Jest. We updated the [React Tutorial](/jest/docs/tutorial-react.html) with a new guide for snapshot testing.\n\nThis feature was built by [Ben Alpert](https://twitter.com/soprano) and [Cristian Carlesso](https://twitter.com/kentaromiura).\n\n## Experimental React Native support\n\nBy building a test renderer that targets no specific platform we are finally able to support a full, unmocked version of React Native. We are excited to launch experimental React Native support for Jest through the `jest-react-native` package.\n\nYou can start using Jest with react-native by running `npm install --save-dev jest-react-native` and by adding the preset to your Jest configuration:\n\n```javascript\n\"jest\": {\n  \"preset\": \"jest-react-native\"\n}\n```\n\n* [Tutorial and setup guide](/jest/docs/tutorial-react-native.html#content)\n* [Example project](https://github.com/facebook/jest/tree/master/examples/react-native)\n*  [Example pull request for *snowflake*](https://github.com/bartonhammond/snowflake/pull/110), a popular react-native open source library.\n\n*Note: the preset currently only implements the minimal set of configuration necessary to get started with React Native testing. We are hoping for community contributions to improve this project. Please try it and file [issues](https://github.com/facebook/jest/issues) or send pull requests!*\n\n## Why snapshot testing?\n\nFor Facebook's native apps we use a system called ‚Äúsnapshot testing‚Äù: a snapshot test system that renders UI components, takes a screenshot and subsequently compares a recorded screenshot with changes made by an engineer. If the screenshots don't match, there are two possibilities: either the change is unexpected or the screenshot can be updated to the new version of the UI component.\n\nWhile this was the solution we wanted for the web, we also found many problems with such end-to-end tests that snapshot integration tests solve:\n\n* **No flakiness:** Because tests are run in a command line runner instead of a real browser or on a real phone, the test runner doesn't have to wait for builds, spawn browsers, load a page and drive the UI to get a component into the expected state which tends to be flaky and the test results become noisy.\n* **Fast iteration speed:** Engineers want to get results in less than a second rather than waiting for minutes or even hours. If tests don't run quickly like in most end-to-end frameworks, engineers don't run them at all or don't bother writing them in the first place.\n* **Debugging:** It's easy to step into the code of an integration test in JS instead of trying to recreate the screenshot test scenario and debugging what happened in the visual diff.\n\nBecause we believe snapshot testing can be useful beyond Jest we split the feature into a [jest-snapshot](https://github.com/facebook/jest/tree/master/packages/jest-snapshot) package. We are happy to work with the community to make it more generic so it can be integrated with other test runners and share concepts and infrastructure with each other.\n\nFinally, here is a quote of a Facebook engineer describing how snapshot testing changed his unit testing experience:\n\n> ‚ÄúOne of the most challenging aspects of my project was keeping the input and output files for each test case in sync. Each little change in functionality could cause all the output files to change. With snapshot testing I do not need the output files, the snapshots are generated for free by Jest! I can simply inspect how Jest updates the snapshots rather than making the changes manually.‚Äù ‚Äì [Kyle Davis](https://github.com/kyldvs) working on [fjs](https://github.com/kyldvs/fjs).\n\n## What's next for Jest\n\nRecently [Dmitrii Abramov](https://twitter.com/abramov_dmitrii) has joined the Jest team full time to improve our unit and integration test infrastructure for Facebook's ads products. For the next few months the Jest team is planning major improvements in these areas:\n\n* **Replace Jasmine:** Jasmine is slowing us down and is not being very actively developed. We started replacing all the Jasmine matchers and are excited to add new features and drop this dependency.\n* **Code Coverage:** When Jest was originally created, tools such as babel didn't exist. Our code coverage support has a bunch of edge cases and isn't always working properly. We are rewriting it to address all the current problems with coverage.\n* **Developer Experience:** This ranges from improving the setup process, the debugging experience to CLI improvements and more documentation.\n* **Mocking:** The mocking system, especially around manual mocks, is not working well and is confusing. We hope to make it more strict and easier to understand.\n* **Performance:** Further performance improvements especially for really large codebases are being worked on.\n\nAs always, if you have questions or if you are excited to help out, please reach out to us!\n",
    "title": "Jest 14.0: React Tree Snapshot Testing",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "Jest 14.0: React Tree Snapshot Testing"
  },
  {
    "path": "2016/06/22/jest-13.html",
    "content": "\nToday we are happy to announce the next major release of Jest. We have made major changes to Jest which are going to benefit you and all of Facebook's JavaScript test infrastructure. Most importantly, we added static types to all of Jest's code during a recent Jest hackathon at Facebook. Fifteen people worked for a day and night to add [Flow](https://flowtype.org/) types to Jest and to add new features to Jest. The Flow types serve two purposes: First, we believe that code is written to be read. Most of the time, code is written only once but read by dozens of people over the course of years. Adding static types to the project helps document the code and helps explain some of the architecture in Jest. Second, adding static types makes maintenance easier and will allow us to more confidently refactor parts of Jest without fear of breakages.\n\nThe Flow project has evolved a lot within Facebook and has been successfully adopted across many of our frameworks and almost all of our product code. Adoption can be parallelized incredibly well ‚Äì it can be done file-by-file until enough of the codebase is well-typed. Then, Flow provides real value and helps guide through large changes. Through this, many small edge cases and bugs were found.\n\n<!--truncate-->\n\nWith the help of [lerna](https://github.com/lerna/lerna), we continued to modularize the Jest project. With just a small [update to the configuration](https://github.com/lerna/lerna#lernajson), Flow and lerna now get along well with each other. Splitting up Jest into packages helped us rethink module boundaries and enabled us to ship useful [packages](https://github.com/facebook/jest/tree/master/packages) standalone: The `jest-runtime` and `jest-repl` cli tools now allow you to run scripts in a sandboxed Jest environment, enabling you to run and debug your app from the command line. This is especially helpful for projects that use Facebook's `@providesModule` module convention. To get started, just install `jest-repl` and run it in the same folder you normally run your tests in! We also published a `jest-changed-files` package that finds changed files in version control for either git or hg, a common thing in developer tools.\n\n## New and improved features\n\n* Added a notification plugin that shows a test run notification when using `--notify`.\n* Added a `browser` config option to properly resolve npm packages with a browser field in `package.json` if you are writing tests for client side apps.\n* Improved ‚Äúno tests found message‚Äù which will now report which tests were found and how they were filtered.\n* Added `jest.isMockFunction(jest.fn())` to test for mock functions.\n* Improved test reporter printing and added a test failure summary when running many tests.\n* Added support for mocking virtual modules through `jest.mock('Module', implementation, {virtual: true})`.\n* Removed the `.haste_cache` folder. Jest now uses the operating system's preferred temporary file location.\n* Added the duration of individual tests in verbose mode.\n* Added the ability to record snapshots in Jest. We'll be publishing a separate blog post about this feature soon.\n\nFinally, we have received a complete website redesign done by Matthew Johnston and added documentation for using [Jest with Webpack](http://facebook.github.io/jest/docs/tutorial-webpack.html#content). Happy Jesting!\n",
    "title": "Jest 13.0: Flow & REPL",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "Jest 13.0: Flow & REPL"
  },
  {
    "path": "2016/04/12/jest-11.html",
    "content": "\nToday we're announcing a switch to major revisions for Jest with Jest 11.0 being the first major release. Jest has been used by Facebook engineers and on our continuous integration systems for years and we believe Jest has been way beyond a ‚Äú1.0 release‚Äù for a long time. This is similar to a change [the React team has made](http://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html).\n\nIf you are using Jest 0.9 or Jest 0.10 the upgrade should be seamless. All changes from the last few months were rolled into Jest 11.0.\n\n### New in Jest 11.0.\n\n#### Babel Integration and Simplified Setup\n\n`babel-jest` was adopted within the newly modularized Jest [repository](https://github.com/facebook/jest/tree/master/packages) and it is now seamlessly integrated into Jest. If you are upgrading from an older version of Jest or are looking to adopt Jest, we recommend reading the [Getting Started guide](http://facebook.github.io/jest/docs/getting-started.html).\n\n<!--truncate-->\n\nPreviously Jest provided APIs such as `jest.dontMock` which unmocks a module that is subsequently being required using the `require` function. Testing code usually looked like this:\n\n```javascript\njest.dontMock('LikeButton');\nconst LikeButton = require('LikeButton'); // LikeButton is unmocked\n```\n\nHowever, together with ES2015 import statements this will no longer work. Per the specification `import`s are hoisted to the top of their code block. Code written like this:\n\n```javascript\njest.dontMock('LikeButton');\nimport LikeButton from 'LikeButton';\n```\n\nwhen executed, would actually be run in this order:\n\n```javascript\nimport LikeButton from 'LikeButton'; // This happens before the dontMock call.\njest.dontMock('LikeButton');\n```\n\nThe LikeButton module would therefore be mocked even though we explicitly call `dontMock`.\n\nWhen the latest versions of Jest and babel-jest are used together, calls to the new APIs `jest.unmock`, `jest.mock`, `jest.disableAutomock` and `jest.enableAutomock` are hoisted to the top of their block, before ES2015 import statements.\n\n```javascript\njest.unmock('LikeButton');\nimport LikeButton from 'LikeButton'; // LikeButton is properly unmocked!\n```\n\n#### (Auto)Mocking Improvements\n\nWe have made numerous improvements and bug fixes to Jest's automocking feature, improved npm3 support and added new manual mocking APIs. Many people have expressed a desire use Jest with the automocking feature disabled. A global configuration option [`automock`](http://facebook.github.io/jest/docs/api.html#automock-boolean), which can be set to `false`, was added.\n\nWe have also added two new APIs to simplify manual mocks. `jest.mock` specifies a manual mock factory for a specific test:\n\n```\n// Implement a mock for a hypothetical \"sum\" module.\njest.mock('sum', () => {\n  return (a, b) => a + b;\n});\n\nconst sum = require('sum');\nsum(1, 4); // 5\n```\n\nAnd `jest.fn` was added to make it easier to create mock functions:\n\n```\n// Create a mock function\nconst mockFn = jest.fn(() => 42);\nmockFn(); // 42\nexpect(mockFn.calls.length).toEqual(1);\n```\n\n#### Performance\n\nWe recently wrote about some [performance improvements](http://facebook.github.io/jest/blog/2016/03/11/javascript-unit-testing-performance.html) we've made in Jest. Most notably, startup time has been improved and we are now in a comfortable place with regards to performance.\n\n#### Jasmine and Test Assertion Improvements\n\nWhen Jest was open sourced it shipped with Jasmine 1. Jest was designed to work with any test assertion library and optional Jasmine 2 support was added through an [external contribution](https://github.com/facebook/jest/pull/330) at the end of last year. This change delivers better performance and provides a better APIs over the previous version of Jasmine. As such, we have converted all our JavaScript tests at Facebook to Jasmine 2. With Jest 11 we are making Jasmine 2 the new default. Jasmine 1 can be enabled through the [`testRunner`](http://facebook.github.io/jest/docs/api.html#testrunner-string) configuration option.\n\nWe have also made many updates around Jasmine. The failure messages for custom matchers provided for Jest's mock functions were improved and will now also work for Jasmine spies. Skipped tests, when using `fit` or `fdescribe,` are now properly reported at the end of a test run.\n\n#### Other Changes\n\nThe `jest --watch` command has been rewritten and improved. By default it now only runs tests related to changed files. If you want to run all tests on every change, you can run `jest --watch=all`. The verbose logger output has also been improved and we've added more helpful warnings and error messages. We added a [`testEnvironment`](http://facebook.github.io/jest/docs/api.html#testenvironment-string) configuration option to customize the test environment. For example, when building a node service, a special `node` environment instead of `jsdom` can be used. Finally, the website and all documentation have been completely rewritten.\n\nAll changes from the past few months can be found in the [CHANGELOG](https://github.com/facebook/jest/blob/master/CHANGELOG.md).\n\n### Contributions And Jest's future\n\nOver the last six months, Jest has received significant changes from a huge number of new contributors. I'd like to thank all the open source contributors and Facebook employees for their help in making Jest better for everyone. New contributors: Alexander Juarez, Christian Lentfort, Cristian Carlesso, Dan Abramov, Dmitrii Abramov, Evan Jacobs, James Friend, James Ide, Jeff Carpenter, Joe Lencioni, Michael Diolosa, Nik Graf, Pavel Prokopenko, Pavel Volokitin, Sebastian Mayr and ShihChi Huang.\n\nWith your support we are looking forward to making Jest even better in the coming months. We are currently working on improved React (Native) testing, enhanced code coverage support and are planning to open source our internal test runner that allows multiple Jest projects to be run with a single run-command.\n",
    "title": "Jest 11.0",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "Jest 11.0"
  },
  {
    "path": "2016/03/11/javascript-unit-testing-performance.html",
    "content": "\nJest is running thousands of tests at Facebook at all times, either through continuous integration or invoked by engineers manually during development. This worked well for years even as the people working on Jest moved on to other projects within Facebook.\n\nAs engineers added more and more tests though, we noticed the performance of Jest wasn't going to scale. Additionally, in the last year the JavaScript ecosystem has changed dramatically with the introduction of things like npm3 and Babel, which we hadn't anticipated. We formed a new Jest team to address all of these issues and we'll be sharing our progress and plans on this blog from now on.\n\n<!--truncate-->\n\nJest is a bit different from most test runners. We designed it to work well in the context of Facebook's infrastructure:\n\n* **Monorepo**\n  At Facebook we have a huge monorepo that contains all of our JavaScript code. There are many reasons why this approach is advantageous for us and there is an [awesome talk](https://www.youtube.com/watch?v=W71BTkUbdqE) by a Google engineer that highlights all the benefits and drawbacks of monorepos.\n* **Sandboxing**\n  Another feature of Jest that's important to Facebook is how it virtualizes the test environment and wraps `require` in order to sandbox code execution and isolate individual tests. We're even working on making Jest more modular so we can take advantage of this functionality in other non-testing related use cases.\n* **providesModule**\n  If you've looked at any of our open source JavaScript projects before, you may have noticed that we use a `@providesModule` header to assign globally unique IDs to modules. This does require some custom tooling, but it allows us to reference modules without relative paths which has helped us move incredibly fast, has scaled well as our engineering organization has grown, and has fostered code sharing across the entire company. Check out [RelayContainer](https://github.com/facebook/relay/blob/4eae620d86ed7fce1ee463c2fca88eb690d9cbde/src/container/RelayContainer.js#L9) for an example of how this works in practice. One downside to this approach, though, is that we're forced to read and parse our entire JavaScript codebase in order to resolve a single require statement. This would obviously be prohibitively expensive without extensive caching, especially for a short-lived process like Jest.\n\nAs a result of these unique constraints, Jest may never be able to be as fast as other test runners when running on our entire suite of tests. However, engineers rarely need to run Jest on our entire test suite. Powered by static analysis in the [node-haste](https://github.com/facebook/node-haste) project ‚Äì we've been able to make the default mode for running Jest at Facebook `jest --onlyChanged`, or `jest -o`. In this mode we build a reverse dependency graph to find only the affected tests that need to be run based on the modules that have been changed.\n\n## Optimal Scheduling of a Test Run\n\nMost of the time our static analysis determines that more than one test needs to be run. The number of affected tests can be anywhere from a couple of tests to thousands. In order to speed this process up Jest parallelizes test runs across workers. This is great because most of Facebook's development happens on remote servers with many CPU cores.\n\nRecently we noticed Jest often seemed stuck *‚ÄúWaiting for 3 tests‚Äù* for up to a minute toward the end of a run. It turned out we had a few really slow tests in our codebase that were dominating the test runtime. While we were able to speed these individual tests up significantly, we also made a change in how Jest schedules test runs. Previously we used to schedule test runs based on file system traversal, which was actually quite random. Here is an example of 11 tests in gray blocks over two workers. The size of the block is the runtime of the test:\n\n![perf-basic-scheduling](/jest/img/blog/Scheduling1.png)\n\nWe were randomly running a mix of fast and slow tests, and one of our slowest tests ended up running as almost all the other tests were completed, during which the second worker sat idle.\n\nWe made a change to schedule tests based on their file size which is usually a good proxy for how long a test is going to take. A test with a few thousand lines of code likely takes longer than a test with 15 lines of code. While this sped up the entire test run by about 10%, we ended up finding a better heuristic: now Jest stores the runtime of each test in a cache and on subsequent runs, it schedules the slowest tests to run first. Overall this helped improve the runtime of all tests by about 20%.\n\nHere is an example of the same test run from before with better scheduling:\n\n![perf-improved-scheduling](/jest/img/blog/Scheduling2.png)\n\nBecause we are running slow tests first, Jest can sometimes seem to take a long time to start up ‚Äì we only print results after the first test has completed. For the future we are planning to run previously failed tests first, because getting that info to developers as quickly as possible matters the most.\n\n## Inline Requires and Lazy Mocking\n\nIf you have written tests using Jasmine before, they probably look like this:\n\n```js\nconst sum = require('sum');\ndescribe('sum', () => {\n  it('works', () => {\n    expect(sum(5, 4)).toEqual(9);\n  });\n});\n```\n\nOne special thing we do in Jest is reset the entire module registry after every single test (call to `it`) to make sure tests don't depend on each other. Before Jest, individual tests would depend on each other and internal module state often leaked between them. As engineers removed, reordered or refactored tests, some of them started to fail, making it hard for people to understand what was going on.\n\nEvery single test in Jest receives a fresh new copy of all modules, including new versions of all mocked dependencies which take a lot of time to generate for each test. A side effect of this is that we had to call `require` manually before every test, like this:\n\n```js\nlet sum;\ndescribe('sum', () => {\n  beforeEach(() => {\n     sum = require('sum');\n  });\n  it('works', () => {\n    expect(sum(5, 4)).toEqual(9);\n  });\n  it('works too', () => {\n    // This copy of sum is not the same as in the previous call to `it`.\n    expect(sum(2, 3)).toEqual(5);\n  });\n});\n```\n\nWe built a babel transform called [inline-requires](https://github.com/facebook/fbjs/blob/master/packages/babel-preset-fbjs/plugins/inline-requires.js) that removes top-level require statements and inlines them in code. For example, the line `const sum = require('sum');` will be removed from code, but every use of `sum` in the file will be replaced by `require('sum')`. With this transform we can write tests just like you'd expect in Jasmine and the code gets transformed into this:\n\n```js\ndescribe('sum', () => {\n  it('works', () => {\n    expect(require('sum')(5, 4)).toEqual(9);\n  });\n});\n```\n\nA great side-effect of inline requires is that we only require the modules that we actually use within the test itself, instead of all the modules we used in the entire file.\n\nWhich leads to another optimization: lazy mocking. The idea is to only mock modules on demand, which combined with inline requires saves us from mocking a lot of modules and all their recursive dependencies.\n\nWe were able to update all tests using a [codemod](https://github.com/cpojer/js-codemod/blob/master/transforms/outline-require.js) in no time ‚Äì it was a *simple* 50,000 line code change. Inline requires and lazy mocking improved the test runtime by 50%.\n\nThe inline-require babel plugin is not only useful for Jest but for normal JavaScript as well. It was shipped by [Bhuwan](https://twitter.com/voideanvalue) to all users of [facebook.com](http://facebook.com/) just a week ago and significantly improved startup time.\n\nFor now, if you'd like to use this transform in Jest you'll have to add it manually to your Babel configuration. We are working on ways to make this easier to opt-in.\n\n## Repo-Sync and Caching\n\nThe open source version of Jest used to be a fork of our internal version, and we'd sync Jest out only once every couple of months. This was a painful manual process that required fixing up many tests every time. We recently upgraded Jest and brought parity to all platforms (iOS, Android and web) and then enabled our sync process. Now, every change to Jest in open source is run against all of our internal tests, and there's only a single version of Jest that's consistent everywhere.\n\nThe first feature we got to take advantage of after unforking was the preprocessor cache. If you are using Babel together with Jest, Jest has to pre-process every JavaScript file before it can execute it. We built a caching layer so that each file, when unchanged, only has to be transformed a single time. After we unforked Jest, we were able to easily fix up the open source implementation and shipped it at Facebook. This resulted in another 50% performance win. Because the cache only works on the second-run, the cold start time of Jest was unaffected.\n\nWe also realized we were doing a lot of path operations when resolving relative requires. Because the module registry is reset for every test, there were thousands of calls that could be memoized. One big optimization was to add a lot more caching, not just around a single test, but also across test files. Previously, we would generate module metadata for the automocking feature once for every test file. The object a module exports never changes however, so we now share this code across test files. Unfortunately, because JavaScript and Node.js don't have shared memory, we have to do all of this work at least once per worker process.\n\n## Question Everything\n\nWhen trying to improve performance, it's important to also dive into the systems that sit above and below your system. In the case of Jest, things like Node.js and the test files themselves, for example. One of the first things we did was to update Node.js at Facebook from the years-old 0.10 to iojs and subsequently to Node 4. The new version of V8 helped improve performance and was quite easy to upgrade to.\n\n We noticed that the `path` module in Node.js is slow when making thousands of path operations which was [fixed in Node 5.7](https://github.com/nodejs/node/pull/5123). Until we drop support for Node 4 internally at Facebook, we'll ship our own version of the [fastpath](https://github.com/facebook/node-haste/blob/master/src/fastpath.js) module.\n\nWe next started questioning the outdated [node-haste](https://github.com/facebook/node-haste). As mentioned before, the entire project has to be parsed for `@providesModule` headers to build a dependency graph. When this system was originally built, `node_modules` didn't exist and our file system crawler wasn't excluding them properly.\n\nIn previous versions, Jest would actually read every file in `node_modules` ‚Äì which contributed to the slow startup time of Jest. When we picked up Jest again we replaced the entire project with a new implementation, based on react-native's packager. The startup time of Jest is now less than a second even on large projects. The react-native team, specifically [David](https://twitter.com/void_0), [Amjad](https://twitter.com/amasad) and [Martin](https://twitter.com/martinbigio) did an outstanding job on this project.\n\n## Adding everything up\n\nA lot of the above changes improved the test runtime by 10% or sometimes even 50%. We started at a runtime of about 10 minutes for all tests, and without these improvements we'd probably be at around 20 minutes by now. After these improvements, though, it now consistently takes around 1 minute and 35 seconds to run all our tests!\n\nMore importantly, adding new tests causes total runtime to grow very slowly. Engineers can write and run more tests without feeling the costs.\n\nWith Jest's recent 0.9 release and performance improvements from the [node-haste2 integration](https://github.com/facebook/jest/pull/599), the runtime of the [Relay](https://github.com/facebook/relay) framework's test suite went down from 60 seconds to about 25 and the [react-native](https://github.com/facebook/react-native) test suite now finishes in less than ten seconds on a 13‚Äù MacBook Pro.\n\nWe're very happy with the wins we've seen so far, and we're going to keep working on Jest and making it better. If you are curious about contributing to Jest, feel free get in touch on GitHub, [Discord](http://facebook.github.io/jest/support.html) or Facebook :)\n",
    "title": "JavaScript Unit Testing Performance",
    "author": "Christoph Pojer",
    "authorURL": "http://twitter.com/cpojer",
    "authorFBID": 100000023028168,
    "id": "JavaScript Unit Testing Performance"
  }
];