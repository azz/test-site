var CWD=process.cwd();

var Metadata=require('../core/metadata.js');
var fs=require('fs');
var languages=require(CWD+'/languages.js');

function readCategories(layout){

var enabledLanguages=[];
languages.filter(function(lang){return lang.enabled;}).map(function(lang){
enabledLanguages.push(lang.tag);
});

allCategories={};

for(var k=0;k<enabledLanguages.length;++k){
language=enabledLanguages[k];

var metadatas=Metadata.filter(function(metadata){
return metadata.layout===layout&&
metadata.language===language;
});


var articles={};
for(var _i=0;_i<metadatas.length;++_i){
var _metadata=metadatas[_i];
articles[_metadata.id]=_metadata;
}


var previous={};
for(var _i2=0;_i2<metadatas.length;++_i2){
var _metadata2=metadatas[_i2];
if(_metadata2.next){
if(!articles[_metadata2.next]){
throw new Error(
'`next: '+_metadata2.next+'` in '+_metadata2.id+" doesn't exist");

}
previous[articles[_metadata2.next].id]=_metadata2.id;
}
}


var first=null;
for(var _i3=0;_i3<metadatas.length;++_i3){
var _metadata3=metadatas[_i3];
if(!previous[_metadata3.id]){
first=_metadata3;
break;
}
}

var categories=[];
var currentCategory=null;

var metadata=first;
var i=0;
while(metadata&&i++<1000){
if(!currentCategory||metadata.category!==currentCategory.name){
currentCategory&&categories.push(currentCategory);
currentCategory={
name:metadata.category,
links:[]};

}
currentCategory.links.push(metadata);
metadata=articles[metadata.next];
}
categories.push(currentCategory);

allCategories[language]=categories;
}

fs.writeFileSync(
__dirname+'/../core/'+layout+'Categories.js',
'/**\n'+
' * @generated\n'+
' */\n'+
'module.exports = '+
JSON.stringify(allCategories,null,2)+
';');


}

module.exports=readCategories;