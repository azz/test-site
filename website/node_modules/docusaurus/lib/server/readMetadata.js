'use strict';

const CWD = process.cwd();

const path = require('path');
const fs = require('fs');
const os = require('os');
const languages = require(CWD + '/languages.js');
const glob = require('glob');

function splitHeader(content) {
  const lines = content.split(os.EOL);
  let i = 1;
  for (; i < lines.length - 1; ++i) {
    if (lines[i] === '---') {
      break;
    }
  }
  return {
    header: lines.slice(1, i + 1).join('\n'),
    content: lines.slice(i + 1).join('\n')
  };
}

// Extract markdown metadata header
function extractMetadata(content) {
  const metadata = {};
  const both = splitHeader(content);
  const lines = both.header.split('\n');
  for (let i = 0; i < lines.length - 1; ++i) {
    const keyvalue = lines[i].split(':');
    const key = keyvalue[0].trim();
    let value = keyvalue.slice(1).join(':').trim();
    // Handle the case where you have "Community #10"
    try {
      value = JSON.parse(value);
    } catch (e) {}
    metadata[key] = value;
  }
  return { metadata, rawContent: both.content };
}

function processMetadata(file) {
  const result = extractMetadata(fs.readFileSync(file, 'utf8'));

  let language = 'en';

  const metadata = result.metadata;
  const rawContent = result.rawContent;
  metadata.source = path.basename(file);

  metadata.localized_id = metadata.id;
  metadata.id = language + '-' + metadata.id;
  if (metadata.previous) {
    metadata.previous_id = metadata.previous;
    metadata.previous = language + '-' + metadata.previous;
  }
  if (metadata.next) {
    metadata.next_id = metadata.next;
    metadata.next = language + '-' + metadata.next;
  }
  metadata.language = language;

  return { metadata, rawContent: rawContent };
}

function generateAll() {

  const regexSubFolder = /docs\/(.*)\/.*/;

  const enabledLanguages = [];
  languages.filter(lang => lang.enabled).map(lang => {
    enabledLanguages.push(lang.tag);
  });

  const metadatas = [];

  const files = glob.sync(CWD + '/../docs/**');
  files.forEach(file => {
    console.log(file);
    let language = 'en';
    const match = regexSubFolder.exec(file);
    if (match) {
      language = match[1];
    }

    if (enabledLanguages.indexOf(language) === -1) {
      return;
    }

    const extension = path.extname(file);

    if (extension === '.md' || extension === '.markdown') {
      const res = processMetadata(file);
      const metadata = res.metadata;
      metadatas.push(metadata);
    }
  });

  fs.writeFileSync(__dirname + '/../core/metadata.js', '/**\n' + ' * @generated\n' + ' */\n' + 'module.exports = ' + JSON.stringify(metadatas, null, 2) + ';');

  console.log('generated metadata file...');
}

module.exports.processMetadata = processMetadata;
module.exports.generateAll = generateAll;