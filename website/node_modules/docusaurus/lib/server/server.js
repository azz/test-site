#!/usr/bin/env node
var _jsxFileName="website/server/server.js";
require('babel-register')({
ignore:false,
"presets":["react"]});

var CWD=process.cwd();
var express=require('express');
var React=require('react');
var renderToStaticMarkup=require('react-dom/server').renderToStaticMarkup;
var fs=require('fs-extra');
var os=require('os');
var path=require('path');
var readMetadata=require('./readMetadata.js');
var toSlug=require('../core/toSlug.js');
var mkdirp=require('mkdirp');
var siteConfig=require(CWD+'/siteConfig.js');





function purgeCache(moduleName){


searchCache(moduleName,function(mod){
delete require.cache[mod.id];
});



Object.keys(module.constructor._pathCache).forEach(function(cacheKey){
if(cacheKey.indexOf(moduleName)>0){
delete module.constructor._pathCache[cacheKey];
}
});
};





function searchCache(moduleName,callback){

var mod=require.resolve(moduleName);



if(mod&&(mod=require.cache[mod])!==undefined){

(function traverse(mod){


mod.children.forEach(function(child){
traverse(child);
});



callback(mod);
})(mod);
}
};



var Metadata;
var readCategories;

function reloadMetadataCategories(){
readMetadata.generateAll();
purgeCache('../core/metadata.js');
Metadata=require('../core/metadata.js');
purgeCache('./readCategories.js');
readCategories=require('./readCategories.js');
readCategories('docs');
}



var TABLE_OF_CONTENTS_TOKEN='<AUTOGENERATED_TABLE_OF_CONTENTS>';

var insertTableOfContents=function insertTableOfContents(rawContent){
var regexp=/\n###\s+(`.*`.*)\n/g;
var match=void 0;
var headers=[];
while(match=regexp.exec(rawContent)){
headers.push(match[1]);
}

var tableOfContents=headers.
map(function(header){return"  - ["+header+"](#"+toSlug(header)+")";}).
join('\n');

return rawContent.replace(TABLE_OF_CONTENTS_TOKEN,tableOfContents);
};



console.log('server.js triggered...');

var port=3000;

reloadMetadataCategories();

var app=express().
get(/docs/,function(req,res){
purgeCache(CWD+'/siteConfig.js');
siteConfig=require(CWD+'/siteConfig.js');

console.log(req.path);

reloadMetadataCategories();
var links={};
for(var i=0;i<Metadata.length;i++){
var _metadata=Metadata[i];
links[_metadata.permalink]='docs/'+_metadata.language+'/'+_metadata.source;
}
var mdToHtml={};
for(var _i=0;_i<Metadata.length;_i++){
var _metadata2=Metadata[_i];
mdToHtml['docs/'+_metadata2.language+'/'+_metadata2.source]=siteConfig.baseUrl+_metadata2.permalink;
}

var file=links[req.path.toString().replace(siteConfig.baseUrl,'')];
file=CWD+'/../'+file;
console.log(file);
var result=readMetadata.processMetadata(file);

var language='en';
var metadata=result.metadata;
var rawContent=result.rawContent;


if(rawContent&&rawContent.indexOf(TABLE_OF_CONTENTS_TOKEN)!==-1){
rawContent=insertTableOfContents(rawContent);
}


Object.keys(mdToHtml).forEach(function(key,index){
rawContent=rawContent.replace(new RegExp(key,'g'),mdToHtml[key]);
});

purgeCache('../core/DocsPost.js');
var DocsPost=require('../core/DocsPost.js');
var docComp=React.createElement(DocsPost,{config:siteConfig,metadata:metadata,language:language,content:rawContent,__source:{fileName:_jsxFileName,lineNumber:145}});

res.send(renderToStaticMarkup(docComp));
});

app.get('*.html',function(req,res){
purgeCache(CWD+'/siteConfig.js');
siteConfig=require(CWD+'/siteConfig.js');

console.log(req.path);
var file=req.path.toString().replace(/\.html$/,'.js');
file=file.replace(siteConfig.baseUrl,'');
userFile=CWD+'/src/'+file;
defaultFile=__dirname+'/../src/'+file;

if(fs.existsSync(userFile)||
fs.existsSync(userFile=userFile.replace(path.basename(userFile),'en/'+path.basename(userFile)))){


var parts=userFile.split('src/');
var tempFile=__dirname+'/../src/'+parts[1];
tempFile=tempFile.replace(path.basename(file),'temp'+path.basename(file));
mkdirp.sync(tempFile.replace(new RegExp('/[^/]*$'),''));
fs.copySync(userFile,tempFile);


purgeCache(tempFile);
var ReactComp=require(tempFile);
var str=renderToStaticMarkup(React.createElement(ReactComp,{language:'en',__source:{fileName:_jsxFileName,lineNumber:173}}));

fs.removeSync(tempFile);

res.send(str);
}else if(fs.existsSync(defaultFile)){
purgeCache(defaultFile);
var _ReactComp=require(defaultFile);
res.send(renderToStaticMarkup(React.createElement(_ReactComp,{language:'en',__source:{fileName:_jsxFileName,lineNumber:181}})));
}else{
console.log(req.path);
res.send('No file found');
}
});

app.get('/',function(req,res){
res.redirect('/index.html');
});
app.get(siteConfig.baseUrl,function(req,res){
res.redirect('/index.html');
});

app.get('*.css',function(req,res){
var filePath=req.path.toString().replace(siteConfig.baseUrl,'/');
var cssContent=void 0;
if(fs.existsSync(CWD+'/src'+filePath)){
cssContent=fs.readFileSync(CWD+'/src'+filePath);
}else
if(fs.existsSync(__dirname+'/../src'+filePath)){
cssContent=fs.readFileSync(__dirname+'/../src'+filePath);
}else
{
res.send('No File Found');
return;
}
cssContent=cssContent.toString().replace(new RegExp('{primaryColor}','g'),siteConfig.colors.primaryColor);
cssContent=cssContent.replace(new RegExp('{secondaryColor}','g'),siteConfig.colors.secondaryColor);
cssContent=cssContent.replace(new RegExp('{prismColor}','g'),siteConfig.colors.prismColor);

res.send(cssContent);
});

app.use(siteConfig.baseUrl,express.static(CWD+'/src'));
app.use(siteConfig.baseUrl,express.static(__dirname+'/../src'));

app.listen(port);
console.log('listening on port: '+port);