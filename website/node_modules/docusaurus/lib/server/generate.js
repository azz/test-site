#!/usr/bin/env node --use-strict


require('babel-register')({
  ignore: false,
  "presets": ["react"]
});
const CWD = process.cwd();
const fs = require('fs-extra');
const readMetadata = require('./readMetadata.js');
const renderToStaticMarkup = require('react-dom/server').renderToStaticMarkup;
const path = require('path');
const toSlug = require('../core/toSlug.js');
const React = require('react');
const siteConfig = require(CWD + '/siteConfig.js');
const mkdirp = require('mkdirp');
const glob = require('glob');
const languages = require(CWD + '/languages.js');
const Site = require('../core/Site.js');

console.log('generate.js triggered...');

function writeFileAndCreateFolder(file, content) {
  mkdirp.sync(file.replace(new RegExp('/[^/]*$'), ''));

  fs.writeFileSync(file, content);
}

const TABLE_OF_CONTENTS_TOKEN = '<AUTOGENERATED_TABLE_OF_CONTENTS>';

const insertTableOfContents = rawContent => {
  const regexp = /\n###\s+(`.*`.*)\n/g;
  let match;
  const headers = [];
  while (match = regexp.exec(rawContent)) {
    headers.push(match[1]);
  }

  const tableOfContents = headers.map(header => `  - [${header}](#${toSlug(header)})`).join('\n');

  return rawContent.replace(TABLE_OF_CONTENTS_TOKEN, tableOfContents);
};

const regexSubFolder = /docs\/(.*)\/.*/;

const enabledLanguages = [];
languages.filter(lang => lang.enabled).map(lang => {
  enabledLanguages.push(lang.tag);
});

readMetadata.generateAll();
const Metadata = require('../core/metadata.js');
let mdToHtml = {};
for (let i = 0; i < Metadata.length; i++) {
  const metadata = Metadata[i];
  mdToHtml['/docs/' + metadata.language + '/' + metadata.source] = siteConfig.baseUrl + metadata.permalink;
}

const readCategories = require('./readCategories.js');
let layouts = {};
for (let i = 0; i < Metadata.length; i++) {
  let layout = Metadata[i].layout;
  if (layouts[layout] !== true) {
    layouts[layout] = true;
    readCategories(layout);
  }
}

const DocsPost = require('../core/DocsPost.js');

fs.removeSync(__dirname + '/../../build');

// create html files for all docs
files = glob.sync(CWD + '/../docs/**');
files.forEach(file => {
  // console.log(file);
  let language = 'en';
  const match = regexSubFolder.exec(file);
  if (match) {
    language = match[1];
  }

  if (enabledLanguages.indexOf(language) === -1) {
    return;
  }

  const extension = path.extname(file);

  if (extension === '.md' || extension === '.markdown') {
    const result = readMetadata.processMetadata(file);

    const metadata = result.metadata;
    const rawContent = result.rawContent;

    /* generate table of contents if appropriate */
    if (rawContent && rawContent.indexOf(TABLE_OF_CONTENTS_TOKEN) != -1) {
      rawContent = insertTableOfContents(rawContent);
    }

    /* replace any links to markdown files to their website html links */
    Object.keys(mdToHtml).forEach(function (key, index) {
      rawContent = rawContent.replace(new RegExp(key, 'g'), mdToHtml[key]);
    });

    const docComp = React.createElement(DocsPost, { config: siteConfig, metadata: metadata, language: language, content: rawContent });
    const str = renderToStaticMarkup(docComp);

    let targetFile = __dirname + '/../../build' + siteConfig.baseUrl + metadata.permalink;
    // console.log(targetFile);
    writeFileAndCreateFolder(targetFile, str);
  }
});

/* compile/copy all files in src of docusaurus into build */
files = glob.sync(__dirname + '/../src/**');
files.forEach(file => {
  // console.log(file);
  let targetFile = file.replace('/lib/src/', '/build' + siteConfig.baseUrl);
  if (file.match(/\.js$/)) {
    targetFile = targetFile.replace(/\.js$/, '.html');
    const ReactComp = require(file);
    const str = renderToStaticMarkup(React.createElement(ReactComp, { language: 'en' }));
    writeFileAndCreateFolder(targetFile, str);
  } else if (file.match(/\.css$/)) {
    console.log(file);
    let cssContent = fs.readFileSync(file);
    cssContent = cssContent.toString().replace(new RegExp('{primaryColor}', 'g'), siteConfig.colors.primaryColor);
    cssContent = cssContent.replace(new RegExp('{secondaryColor}', 'g'), siteConfig.colors.secondaryColor);
    cssContent = cssContent.replace(new RegExp('{prismColor}', 'g'), siteConfig.colors.prismColor);

    mkdirp.sync(targetFile.replace(new RegExp('/[^/]*$'), ''));
    fs.writeFileSync(targetFile, cssContent);
  } else if (!fs.lstatSync(file).isDirectory()) {
    // console.log(file);
    mkdirp.sync(targetFile.replace(new RegExp('/[^/]*$'), ''));
    fs.copySync(file, targetFile);
  }
});

/* copy all user provided files into build folder, compiling any js files in src
   by making a temporary copy in docusaurus's src folder so React components are
   required with corresponding paths */
files = glob.sync(CWD + '/src/**');
files.forEach(file => {
  if (file.match(/\.js$/) && !file.match(/src\/js/)) {
    let parts = file.split('src');
    let tempFile = __dirname + '/../src' + parts[1];
    tempFile = tempFile.replace(path.basename(file), 'temp' + path.basename(file));
    mkdirp.sync(tempFile.replace(new RegExp('/[^/]*$'), ''));
    fs.copySync(file, tempFile);

    let targetFile = __dirname + '/../../build' + siteConfig.baseUrl + parts[1];
    targetFile = targetFile.replace(/\.js$/, '.html');
    const ReactComp = require(tempFile);
    const str = renderToStaticMarkup(React.createElement(ReactComp, { language: 'en' }));
    writeFileAndCreateFolder(targetFile, str);

    fs.removeSync(tempFile);
  } else if (file.match(/\.css$/)) {
    console.log(file);
    let parts = file.split('src');
    let cssContent = fs.readFileSync(file);
    cssContent = cssContent.toString().replace(new RegExp('{primaryColor}', 'g'), siteConfig.colors.primaryColor);
    cssContent = cssContent.replace(new RegExp('{secondaryColor}', 'g'), siteConfig.colors.secondaryColor);
    cssContent = cssContent.replace(new RegExp('{prismColor}', 'g'), siteConfig.colors.prismColor);

    let targetFile = __dirname + '/../../build' + siteConfig.baseUrl + parts[1];
    mkdirp.sync(targetFile.replace(new RegExp('/[^/]*$'), ''));
    fs.writeFileSync(targetFile, cssContent);
  } else if (!fs.lstatSync(file).isDirectory()) {
    let parts = file.split('src');
    let targetFile = __dirname + '/../../build' + siteConfig.baseUrl + parts[1];
    mkdirp.sync(targetFile.replace(new RegExp('/[^/]*$'), ''));
    fs.copySync(file, targetFile);
  }
});

/* copy html files in 'en' to base level as well */
files = glob.sync(__dirname + '/../../build' + siteConfig.baseUrl + 'en/**');
files.forEach(file => {
  let targetFile = file.replace('en/', '');
  if (file.match(/\.html$/)) {
    fs.copySync(file, targetFile);
  }
});