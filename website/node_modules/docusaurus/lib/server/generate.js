#!/usr/bin/env node
var _jsxFileName="website/server/generate.js";
require('babel-register')({
ignore:false,
"presets":["react"]});

var CWD=process.cwd();
var fs=require('fs-extra');
var readMetadata=require('./readMetadata.js');
var renderToStaticMarkup=require('react-dom/server').renderToStaticMarkup;
var path=require('path');
var toSlug=require('../core/toSlug.js');
var React=require('react');
var siteConfig=require(CWD+'/siteConfig.js');
var mkdirp=require('mkdirp');
var glob=require('glob');
var languages=require(CWD+'/languages.js');
var Site=require('../core/Site.js');


console.log('generate.js triggered...');

function writeFileAndCreateFolder(file,content){
mkdirp.sync(file.replace(new RegExp('/[^/]*$'),''));

fs.writeFileSync(file,content);
}

var TABLE_OF_CONTENTS_TOKEN='<AUTOGENERATED_TABLE_OF_CONTENTS>';

var insertTableOfContents=function insertTableOfContents(rawContent){
var regexp=/\n###\s+(`.*`.*)\n/g;
var match=void 0;
var headers=[];
while(match=regexp.exec(rawContent)){
headers.push(match[1]);
}

var tableOfContents=headers.
map(function(header){return"  - ["+header+"](#"+toSlug(header)+")";}).
join('\n');

return rawContent.replace(TABLE_OF_CONTENTS_TOKEN,tableOfContents);
};

var regexSubFolder=/docs\/(.*)\/.*/;

var enabledLanguages=[];
languages.filter(function(lang){return lang.enabled;}).map(function(lang){
enabledLanguages.push(lang.tag);
});

readMetadata.generateAll();
var Metadata=require('../core/metadata.js');
var mdToHtml={};
for(var i=0;i<Metadata.length;i++){
var metadata=Metadata[i];
mdToHtml['/docs/'+metadata.language+'/'+metadata.source]=siteConfig.baseUrl+metadata.permalink;
}

var readCategories=require('./readCategories.js');
var layouts={};
for(var _i=0;_i<Metadata.length;_i++){
var layout=Metadata[_i].layout;
if(layouts[layout]!==true){
layouts[layout]=true;
readCategores(layout);
}
}

var DocsPost=require('../core/DocsPost.js');

fs.removeSync(__dirname+'/../../build');



files=glob.sync(CWD+'/../docs/**');
files.forEach(function(file){

var language='en';
var match=regexSubFolder.exec(file);
if(match){
language=match[1];
}

if(enabledLanguages.indexOf(language)===-1){
return;
}

var extension=path.extname(file);

if(extension==='.md'||extension==='.markdown'){
var result=readMetadata.processMetadata(file);

var _metadata=result.metadata;
var rawContent=result.rawContent;


if(rawContent&&rawContent.indexOf(TABLE_OF_CONTENTS_TOKEN)!=-1){
rawContent=insertTableOfContents(rawContent);
}


Object.keys(mdToHtml).forEach(function(key,index){
rawContent=rawContent.replace(new RegExp(key,'g'),mdToHtml[key]);
});

var docComp=React.createElement(DocsPost,{config:siteConfig,metadata:_metadata,language:language,content:rawContent,__source:{fileName:_jsxFileName,lineNumber:107}});
var str=renderToStaticMarkup(docComp);

var targetFile=__dirname+'/../../build'+siteConfig.baseUrl+_metadata.permalink;

writeFileAndCreateFolder(targetFile,str);
}
});



files=glob.sync(__dirname+'/../src/**');
files.forEach(function(file){

var targetFile=file.replace('/lib/src/','/build'+siteConfig.baseUrl);
if(file.match(/\.js$/)){
targetFile=targetFile.replace(/\.js$/,'.html');
var ReactComp=require(file);
var str=renderToStaticMarkup(React.createElement(ReactComp,{language:'en',__source:{fileName:_jsxFileName,lineNumber:125}}));
writeFileAndCreateFolder(targetFile,str);
}else
if(file.match(/\.css$/)){
console.log(file);
var cssContent=fs.readFileSync(file);
cssContent=cssContent.toString().replace(new RegExp('{primaryColor}','g'),siteConfig.colors.primaryColor);
cssContent=cssContent.replace(new RegExp('{secondaryColor}','g'),siteConfig.colors.secondaryColor);
cssContent=cssContent.replace(new RegExp('{prismColor}','g'),siteConfig.colors.prismColor);


mkdirp.sync(targetFile.replace(new RegExp('/[^/]*$'),''));
fs.writeFileSync(targetFile,cssContent);
}else
if(!fs.lstatSync(file).isDirectory()){

mkdirp.sync(targetFile.replace(new RegExp('/[^/]*$'),''));
fs.copySync(file,targetFile);
}
});




files=glob.sync(CWD+'/src/**');
files.forEach(function(file){
if(file.match(/\.js$/)&&!file.match(/src\/js/)){
var parts=file.split('src');
var tempFile=__dirname+'/../src'+parts[1];
tempFile=tempFile.replace(path.basename(file),'temp'+path.basename(file));
mkdirp.sync(tempFile.replace(new RegExp('/[^/]*$'),''));
fs.copySync(file,tempFile);

var targetFile=__dirname+'/../../build'+siteConfig.baseUrl+parts[1];
targetFile=targetFile.replace(/\.js$/,'.html');
var ReactComp=require(tempFile);
var str=renderToStaticMarkup(React.createElement(ReactComp,{language:'en',__source:{fileName:_jsxFileName,lineNumber:161}}));
writeFileAndCreateFolder(targetFile,str);

fs.removeSync(tempFile);
}else
if(file.match(/\.css$/)){
console.log(file);
var _parts=file.split('src');
var cssContent=fs.readFileSync(file);
cssContent=cssContent.toString().replace(new RegExp('{primaryColor}','g'),siteConfig.colors.primaryColor);
cssContent=cssContent.replace(new RegExp('{secondaryColor}','g'),siteConfig.colors.secondaryColor);
cssContent=cssContent.replace(new RegExp('{prismColor}','g'),siteConfig.colors.prismColor);


var _targetFile=__dirname+'/../../build'+siteConfig.baseUrl+_parts[1];
mkdirp.sync(_targetFile.replace(new RegExp('/[^/]*$'),''));
fs.writeFileSync(_targetFile,cssContent);
}else
if(!fs.lstatSync(file).isDirectory()){
var _parts2=file.split('src');
var _targetFile2=__dirname+'/../../build'+siteConfig.baseUrl+_parts2[1];
mkdirp.sync(_targetFile2.replace(new RegExp('/[^/]*$'),''));
fs.copySync(file,_targetFile2);
}
});


files=glob.sync(__dirname+'/../../build'+siteConfig.baseUrl+'en/**');
files.forEach(function(file){
var targetFile=file.replace('en/','');
if(file.match(/\.html$/)){
fs.copySync(file,targetFile);
}
});